<?xml version="1.0" encoding="UTF-8" ?>
<!--
****************************************************************************************************************************************************
The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at http://www.mozilla.org/MPL/MPL-1.1.html
Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations under the License.
The Original Code is OpenZ. The Initial Developer of the Original Code is Stefan Zimmermann (sz@zimmermann-software.de)
Copyright (C) 2013 Stefan Zimmermann All Rights Reserved.
Contributor(s): ______________________________________.
***************************************************************************************************************************************************
-->





<SqlClass name="PdcCommonData" package="org.openz.pdc.controller" accessModifier="public">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="selectbarcode" type="preparedStatement" return="multiple">
        <SqlMethodComment></SqlMethodComment>
        <Sql>
            select 
                barcode, 
                type, 
                id,
                snrmasterdata_id,
                batchmasterdata_id
            from 
                pdc_getDataIdfromScan(?)
        </Sql>
        <Parameter name="barcode"/>
   </SqlMethod>
   <SqlMethod name="insertProduction" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Send produced Material on Stock',now(),
                      ?,?,'P+',ad_sequence_doc('Production',?,'Y'),trunc(now()))
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="insertConsumption" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment>Initializes a D- (Internal Consumption) Transaction</SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Get Material from Stock',now(),
                      ?,?,'D-',ad_sequence_doc('Production',?,'Y'),trunc(now()))
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterailReturn" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment>Initializes a D+ (Internal Material Return) Transaction</SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Send Material back to Stock',now(),
                      ?,?,'D+',ad_sequence_doc('Production',?,'Y'),trunc(now())) 
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterialLine" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       insert into M_INTERNAL_CONSUMPTIONLINE(M_INTERNAL_CONSUMPTIONLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, M_INTERNAL_CONSUMPTION_ID, 
                                                  M_LOCATOR_ID, M_PRODUCT_ID, LINE, MOVEMENTQTY, DESCRIPTION, C_UOM_ID, C_PROJECT_ID, C_PROJECTTASK_ID)
                  values (get_uuid(),?,?,NOW(), ?, NOW(),?,?,
                          ?,?,to_number(?),to_number(?),'Generated by PDC',?,?, ?);
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="consumptionId"/>
    <Parameter name="locatorId"/>
    <Parameter name="productId"/>
    <Parameter name="line"/>
    <Parameter name="qty"/>
    <Parameter name="uomId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
  </SqlMethod>
  <SqlMethod name="updateMaterialLine" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       UPDATE M_INTERNAL_CONSUMPTIONLINE SET MOVEMENTQTY=to_number(?) where M_INTERNAL_CONSUMPTIONLINE_ID=?
      ]]>
    </Sql>
    <Parameter name="qty"/>
    <Parameter name="consumptionlineId"/>
  </SqlMethod>
  <SqlMethod name="getProductStdUOM" type="preparedStatement" return="string">
      <Sql>
        SELECT  c_uom_id from m_product where m_product_id = ?  
      </Sql>
      <Parameter name="mProductId"/>
   </SqlMethod>
   <SqlMethod name="getIDWhenScannedSameLine" type="preparedStatement" return="string">
      <Sql>
        SELECT  M_INTERNAL_CONSUMPTIONLINE_ID from M_INTERNAL_CONSUMPTIONLINE
        where M_INTERNAL_CONSUMPTION_ID=? and m_product_id = ? and m_locator_id=?  
      </Sql>
      <Parameter name="mConsumptionId"/>
      <Parameter name="mProductId"/>
      <Parameter name="mLocatorId"/>
   </SqlMethod>
  <SqlMethod name="deleteMaterialLine" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTIONLINE_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionlineId"/>
  </SqlMethod>
  <SqlMethod name="getProductionOrderFromWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT  c_project_id from c_projecttask where c_projecttask_id = ?  
      </Sql>
      <Parameter name="mProductId"/>
   </SqlMethod>
   <SqlMethod name="getNextLineFromConsumption" type="preparedStatement" return="string">
      <Sql>
        SELECT coalesce(to_char(max(line)+10),'10')   from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="isbatchorserialnumber" type="preparedStatement" return="string">
      <Sql>
        SELECT pdc_isbatchorserialnumber(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="doConsumptionPost" type="preparedStatement" return="string">
      <Sql>
        SELECT  m_internal_consumption_post(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="closeWorkstep" type="preparedStatement" connection="true" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       select zssm_closeworkstep(?,?,?) from dual
      ]]>
    </Sql>
    <Parameter name="projecttaskId"/>
    <Parameter name="userId"/>
    <Parameter name="language"/>
  </SqlMethod>
  <SqlMethod name="deleteAllMaterialLines" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="deleteMaterialTransaction" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTION where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="getConsumptionMovementType" type="preparedStatement" return="string">
      <Sql>
        SELECT movementtype from m_internal_consumption where m_internal_consumption_id= ?
        UNION 
        SELECT 'XX' from dual
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
  </SqlClass>
