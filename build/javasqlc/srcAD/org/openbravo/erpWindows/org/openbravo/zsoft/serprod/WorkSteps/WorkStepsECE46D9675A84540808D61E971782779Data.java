//Sqlc generated V1.O00-1
package org.openbravo.erpWindows.org.openbravo.zsoft.serprod.WorkSteps;

import java.sql.*;

import org.apache.log4j.Logger;

import javax.servlet.ServletException;

import org.openbravo.data.FieldProvider;
import org.openbravo.database.ConnectionProvider;
import org.openbravo.data.UtilSql;
import org.openbravo.data.FResponse;
import java.util.*;

/**
WAD Generated class
 */
class WorkStepsECE46D9675A84540808D61E971782779Data implements FieldProvider {
static Logger log4j = Logger.getLogger(WorkStepsECE46D9675A84540808D61E971782779Data.class);
  private String InitRecordNumber="0";
  public String created;
  public String createdbyr;
  public String updated;
  public String updatedTimeStamp;
  public String updatedby;
  public String updatedbyr;
  public String adOrgId;
  public String adOrgIdr;
  public String isactive;
  public String value;
  public String name;
  public String seqno;
  public String description;
  public String assembly;
  public String mProductId;
  public String mProductIdr;
  public String forcematerialscan;
  public String startonlywithcompletematerial;
  public String isautotriggered;
  public String isautogeneratedplan;
  public String receivingLocator;
  public String receivingLocatorr;
  public String issuingLocator;
  public String issuingLocatorr;
  public String timeperpiece;
  public String setuptime;
  public String mimimumqty;
  public String multipleofmimimumqty;
  public String servcostplan;
  public String machinecostplan;
  public String materialcostplan;
  public String plannedcost;
  public String qty;
  public String zssmWorkstepPrpVId;
  public String indirectcostplan;
  public String adClientId;
  public String percentrejects;
  public String cProjecttaskId;
  public String help;
  public String zssmWorkstepVId;
  public String language;
  public String adUserClient;
  public String adOrgClient;
  public String createdby;
  public String trBgcolor;
  public String totalCount;
  public String dateTimeFormat;

  public String getInitRecordNumber() {
    return InitRecordNumber;
  }

  public String getField(String fieldName) {
    if (fieldName.equalsIgnoreCase("created"))
      return created;
    else if (fieldName.equalsIgnoreCase("createdbyr"))
      return createdbyr;
    else if (fieldName.equalsIgnoreCase("updated"))
      return updated;
    else if (fieldName.equalsIgnoreCase("updated_time_stamp") || fieldName.equals("updatedTimeStamp"))
      return updatedTimeStamp;
    else if (fieldName.equalsIgnoreCase("updatedby"))
      return updatedby;
    else if (fieldName.equalsIgnoreCase("updatedbyr"))
      return updatedbyr;
    else if (fieldName.equalsIgnoreCase("ad_org_id") || fieldName.equals("adOrgId"))
      return adOrgId;
    else if (fieldName.equalsIgnoreCase("ad_org_idr") || fieldName.equals("adOrgIdr"))
      return adOrgIdr;
    else if (fieldName.equalsIgnoreCase("isactive"))
      return isactive;
    else if (fieldName.equalsIgnoreCase("value"))
      return value;
    else if (fieldName.equalsIgnoreCase("name"))
      return name;
    else if (fieldName.equalsIgnoreCase("seqno"))
      return seqno;
    else if (fieldName.equalsIgnoreCase("description"))
      return description;
    else if (fieldName.equalsIgnoreCase("assembly"))
      return assembly;
    else if (fieldName.equalsIgnoreCase("m_product_id") || fieldName.equals("mProductId"))
      return mProductId;
    else if (fieldName.equalsIgnoreCase("m_product_idr") || fieldName.equals("mProductIdr"))
      return mProductIdr;
    else if (fieldName.equalsIgnoreCase("forcematerialscan"))
      return forcematerialscan;
    else if (fieldName.equalsIgnoreCase("startonlywithcompletematerial"))
      return startonlywithcompletematerial;
    else if (fieldName.equalsIgnoreCase("isautotriggered"))
      return isautotriggered;
    else if (fieldName.equalsIgnoreCase("isautogeneratedplan"))
      return isautogeneratedplan;
    else if (fieldName.equalsIgnoreCase("receiving_locator") || fieldName.equals("receivingLocator"))
      return receivingLocator;
    else if (fieldName.equalsIgnoreCase("receiving_locatorr") || fieldName.equals("receivingLocatorr"))
      return receivingLocatorr;
    else if (fieldName.equalsIgnoreCase("issuing_locator") || fieldName.equals("issuingLocator"))
      return issuingLocator;
    else if (fieldName.equalsIgnoreCase("issuing_locatorr") || fieldName.equals("issuingLocatorr"))
      return issuingLocatorr;
    else if (fieldName.equalsIgnoreCase("timeperpiece"))
      return timeperpiece;
    else if (fieldName.equalsIgnoreCase("setuptime"))
      return setuptime;
    else if (fieldName.equalsIgnoreCase("mimimumqty"))
      return mimimumqty;
    else if (fieldName.equalsIgnoreCase("multipleofmimimumqty"))
      return multipleofmimimumqty;
    else if (fieldName.equalsIgnoreCase("servcostplan"))
      return servcostplan;
    else if (fieldName.equalsIgnoreCase("machinecostplan"))
      return machinecostplan;
    else if (fieldName.equalsIgnoreCase("materialcostplan"))
      return materialcostplan;
    else if (fieldName.equalsIgnoreCase("plannedcost"))
      return plannedcost;
    else if (fieldName.equalsIgnoreCase("qty"))
      return qty;
    else if (fieldName.equalsIgnoreCase("zssm_workstep_prp_v_id") || fieldName.equals("zssmWorkstepPrpVId"))
      return zssmWorkstepPrpVId;
    else if (fieldName.equalsIgnoreCase("indirectcostplan"))
      return indirectcostplan;
    else if (fieldName.equalsIgnoreCase("ad_client_id") || fieldName.equals("adClientId"))
      return adClientId;
    else if (fieldName.equalsIgnoreCase("percentrejects"))
      return percentrejects;
    else if (fieldName.equalsIgnoreCase("c_projecttask_id") || fieldName.equals("cProjecttaskId"))
      return cProjecttaskId;
    else if (fieldName.equalsIgnoreCase("help"))
      return help;
    else if (fieldName.equalsIgnoreCase("zssm_workstep_v_id") || fieldName.equals("zssmWorkstepVId"))
      return zssmWorkstepVId;
    else if (fieldName.equalsIgnoreCase("language"))
      return language;
    else if (fieldName.equals("adUserClient"))
      return adUserClient;
    else if (fieldName.equals("adOrgClient"))
      return adOrgClient;
    else if (fieldName.equals("createdby"))
      return createdby;
    else if (fieldName.equals("trBgcolor"))
      return trBgcolor;
    else if (fieldName.equals("totalCount"))
      return totalCount;
    else if (fieldName.equals("dateTimeFormat"))
      return dateTimeFormat;
   else {
     log4j.debug("Field does not exist: " + fieldName);
     return null;
   }
 }

/**
Select for edit
 */
  public static WorkStepsECE46D9675A84540808D61E971782779Data[] selectEdit(ConnectionProvider connectionProvider, String dateTimeFormat, String paramLanguage, String key, String adUserClient, String adOrgClient)    throws ServletException {
    return selectEdit(connectionProvider, dateTimeFormat, paramLanguage, key, adUserClient, adOrgClient, 0, 0);
  }

/**
Select for edit
 */
  public static WorkStepsECE46D9675A84540808D61E971782779Data[] selectEdit(ConnectionProvider connectionProvider, String dateTimeFormat, String paramLanguage, String key, String adUserClient, String adOrgClient, int firstRegister, int numberRegisters)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT to_char(zssm_workstep_prp_v.Created, ?) as created, " +
      "        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = zssm_workstep_prp_v.CreatedBy) as CreatedByR, " +
      "        to_char(zssm_workstep_prp_v.Updated, ?) as updated, " +
      "        to_char(zssm_workstep_prp_v.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  " +
      "        zssm_workstep_prp_v.UpdatedBy, " +
      "        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = zssm_workstep_prp_v.UpdatedBy) as UpdatedByR," +
      "        zssm_workstep_prp_v.AD_Org_ID, " +
      "(CASE WHEN zssm_workstep_prp_v.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS AD_Org_IDR, " +
      "COALESCE(zssm_workstep_prp_v.IsActive, 'N') AS IsActive, " +
      "zssm_workstep_prp_v.Value, " +
      "zssm_workstep_prp_v.Name, " +
      "zssm_workstep_prp_v.SeqNo, " +
      "zssm_workstep_prp_v.Description, " +
      "COALESCE(zssm_workstep_prp_v.Assembly, 'N') AS Assembly, " +
      "zssm_workstep_prp_v.M_Product_ID, " +
      "(CASE WHEN zssm_workstep_prp_v.M_Product_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL2.Name IS NULL THEN TO_CHAR(table2.Name) ELSE TO_CHAR(tableTRL2.Name) END)), ''))),'') ) END) AS M_Product_IDR, " +
      "COALESCE(zssm_workstep_prp_v.ForceMaterialScan, 'N') AS ForceMaterialScan, " +
      "COALESCE(zssm_workstep_prp_v.StartOnlyWithCompleteMaterial, 'N') AS StartOnlyWithCompleteMaterial, " +
      "COALESCE(zssm_workstep_prp_v.Isautotriggered, 'N') AS Isautotriggered, " +
      "COALESCE(zssm_workstep_prp_v.isautogeneratedplan, 'N') AS isautogeneratedplan, " +
      "zssm_workstep_prp_v.Receiving_Locator, " +
      "(CASE WHEN zssm_workstep_prp_v.Receiving_Locator IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Value), ''))),'') ) END) AS Receiving_LocatorR, " +
      "zssm_workstep_prp_v.Issuing_Locator, " +
      "(CASE WHEN zssm_workstep_prp_v.Issuing_Locator IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table4.Value), ''))),'') ) END) AS Issuing_LocatorR, " +
      "zssm_workstep_prp_v.Timeperpiece, " +
      "zssm_workstep_prp_v.Setuptime, " +
      "zssm_workstep_prp_v.Mimimumqty, " +
      "COALESCE(zssm_workstep_prp_v.Multipleofmimimumqty, 'N') AS Multipleofmimimumqty, " +
      "zssm_workstep_prp_v.ServCostPlan, " +
      "zssm_workstep_prp_v.MachineCostPlan, " +
      "zssm_workstep_prp_v.MaterialCostPlan, " +
      "zssm_workstep_prp_v.PlannedCost, " +
      "zssm_workstep_prp_v.Qty, " +
      "zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID, " +
      "zssm_workstep_prp_v.IndirectCostPlan, " +
      "zssm_workstep_prp_v.AD_Client_ID, " +
      "zssm_workstep_prp_v.PercentRejects, " +
      "zssm_workstep_prp_v.C_Projecttask_ID, " +
      "zssm_workstep_prp_v.Help, " +
      "zssm_workstep_prp_v.Zssm_Workstep_V_ID, " +
      "        ? AS LANGUAGE " +
      "        FROM zssm_workstep_prp_v left join (select AD_Org_ID, Name from AD_Org) table1 on (zssm_workstep_prp_v.AD_Org_ID = table1.AD_Org_ID) left join (select M_Product_ID, Value, Name from M_Product) table2 on (zssm_workstep_prp_v.M_Product_ID = table2.M_Product_ID) left join (select M_Product_ID,AD_Language, Name from M_Product_TRL) tableTRL2 on (table2.M_Product_ID = tableTRL2.M_Product_ID and tableTRL2.AD_Language = ?)  left join (select M_Locator_ID, Value from M_Locator) table3 on (zssm_workstep_prp_v.Receiving_Locator = table3.M_Locator_ID) left join (select M_Locator_ID, Value from M_Locator) table4 on (zssm_workstep_prp_v.Issuing_Locator = table4.M_Locator_ID)" +
      "        WHERE 2=2 " +
      "        AND 1=1 " +
      "        AND zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? " +
      "        AND zssm_workstep_prp_v.AD_Client_ID IN (";
    strSql = strSql + ((adUserClient==null || adUserClient.equals(""))?"":adUserClient);
    strSql = strSql + 
      ") " +
      "           AND zssm_workstep_prp_v.AD_Org_ID IN (";
    strSql = strSql + ((adOrgClient==null || adOrgClient.equals(""))?"":adOrgClient);
    strSql = strSql + 
      ") ";

    ResultSet result;
    Vector<java.lang.Object> vector = new Vector<java.lang.Object>(0);
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, dateTimeFormat);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, dateTimeFormat);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, paramLanguage);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, paramLanguage);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, key);
      if (adUserClient != null && !(adUserClient.equals(""))) {
        }
      if (adOrgClient != null && !(adOrgClient.equals(""))) {
        }

      result = st.executeQuery();
      long countRecord = 0;
      long countRecordSkip = 1;
      boolean continueResult = true;
      while(countRecordSkip < firstRegister && continueResult) {
        continueResult = result.next();
        countRecordSkip++;
      }
      while(continueResult && result.next()) {
        countRecord++;
        WorkStepsECE46D9675A84540808D61E971782779Data objectWorkStepsECE46D9675A84540808D61E971782779Data = new WorkStepsECE46D9675A84540808D61E971782779Data();
        objectWorkStepsECE46D9675A84540808D61E971782779Data.created = UtilSql.getValue(result, "created");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.createdbyr = UtilSql.getValue(result, "createdbyr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.updated = UtilSql.getValue(result, "updated");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.updatedTimeStamp = UtilSql.getValue(result, "updated_time_stamp");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.updatedby = UtilSql.getValue(result, "updatedby");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.updatedbyr = UtilSql.getValue(result, "updatedbyr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.adOrgId = UtilSql.getValue(result, "ad_org_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.adOrgIdr = UtilSql.getValue(result, "ad_org_idr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.isactive = UtilSql.getValue(result, "isactive");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.value = UtilSql.getValue(result, "value");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.name = UtilSql.getValue(result, "name");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.seqno = UtilSql.getValue(result, "seqno");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.description = UtilSql.getValue(result, "description");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.assembly = UtilSql.getValue(result, "assembly");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.mProductId = UtilSql.getValue(result, "m_product_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.mProductIdr = UtilSql.getValue(result, "m_product_idr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.forcematerialscan = UtilSql.getValue(result, "forcematerialscan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.startonlywithcompletematerial = UtilSql.getValue(result, "startonlywithcompletematerial");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.isautotriggered = UtilSql.getValue(result, "isautotriggered");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.isautogeneratedplan = UtilSql.getValue(result, "isautogeneratedplan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.receivingLocator = UtilSql.getValue(result, "receiving_locator");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.receivingLocatorr = UtilSql.getValue(result, "receiving_locatorr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.issuingLocator = UtilSql.getValue(result, "issuing_locator");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.issuingLocatorr = UtilSql.getValue(result, "issuing_locatorr");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.timeperpiece = UtilSql.getValue(result, "timeperpiece");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.setuptime = UtilSql.getValue(result, "setuptime");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.mimimumqty = UtilSql.getValue(result, "mimimumqty");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.multipleofmimimumqty = UtilSql.getValue(result, "multipleofmimimumqty");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.servcostplan = UtilSql.getValue(result, "servcostplan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.machinecostplan = UtilSql.getValue(result, "machinecostplan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.materialcostplan = UtilSql.getValue(result, "materialcostplan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.plannedcost = UtilSql.getValue(result, "plannedcost");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.qty = UtilSql.getValue(result, "qty");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.zssmWorkstepPrpVId = UtilSql.getValue(result, "zssm_workstep_prp_v_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.indirectcostplan = UtilSql.getValue(result, "indirectcostplan");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.adClientId = UtilSql.getValue(result, "ad_client_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.percentrejects = UtilSql.getValue(result, "percentrejects");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.cProjecttaskId = UtilSql.getValue(result, "c_projecttask_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.help = UtilSql.getValue(result, "help");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.zssmWorkstepVId = UtilSql.getValue(result, "zssm_workstep_v_id");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.language = UtilSql.getValue(result, "language");
        objectWorkStepsECE46D9675A84540808D61E971782779Data.adUserClient = "";
        objectWorkStepsECE46D9675A84540808D61E971782779Data.adOrgClient = "";
        objectWorkStepsECE46D9675A84540808D61E971782779Data.createdby = "";
        objectWorkStepsECE46D9675A84540808D61E971782779Data.trBgcolor = "";
        objectWorkStepsECE46D9675A84540808D61E971782779Data.totalCount = "";
        objectWorkStepsECE46D9675A84540808D61E971782779Data.InitRecordNumber = Integer.toString(firstRegister);
        vector.addElement(objectWorkStepsECE46D9675A84540808D61E971782779Data);
        if (countRecord >= numberRegisters && numberRegisters != 0) {
          continueResult = false;
        }
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    WorkStepsECE46D9675A84540808D61E971782779Data objectWorkStepsECE46D9675A84540808D61E971782779Data[] = new WorkStepsECE46D9675A84540808D61E971782779Data[vector.size()];
    vector.copyInto(objectWorkStepsECE46D9675A84540808D61E971782779Data);
    return(objectWorkStepsECE46D9675A84540808D61E971782779Data);
  }

/**
Create a registry
 */
  public static WorkStepsECE46D9675A84540808D61E971782779Data[] set(String help, String assembly, String isautotriggered, String forcematerialscan, String value, String zssmWorkstepPrpVId, String receivingLocator, String receivingLocatorr, String createdby, String createdbyr, String indirectcostplan, String seqno, String cProjecttaskId, String mimimumqty, String adClientId, String description, String isautogeneratedplan, String zssmWorkstepVId, String mProductId, String mProductIdr, String timeperpiece, String plannedcost, String materialcostplan, String issuingLocator, String issuingLocatorr, String isactive, String machinecostplan, String setuptime, String adOrgId, String startonlywithcompletematerial, String multipleofmimimumqty, String servcostplan, String qty, String percentrejects, String updatedby, String updatedbyr, String name)    throws ServletException {
    WorkStepsECE46D9675A84540808D61E971782779Data objectWorkStepsECE46D9675A84540808D61E971782779Data[] = new WorkStepsECE46D9675A84540808D61E971782779Data[1];
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0] = new WorkStepsECE46D9675A84540808D61E971782779Data();
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].created = "";
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].createdbyr = createdbyr;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].updated = "";
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].updatedTimeStamp = "";
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].updatedby = updatedby;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].updatedbyr = updatedbyr;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].adOrgId = adOrgId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].adOrgIdr = "";
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].isactive = isactive;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].value = value;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].name = name;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].seqno = seqno;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].description = description;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].assembly = assembly;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].mProductId = mProductId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].mProductIdr = mProductIdr;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].forcematerialscan = forcematerialscan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].startonlywithcompletematerial = startonlywithcompletematerial;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].isautotriggered = isautotriggered;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].isautogeneratedplan = isautogeneratedplan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].receivingLocator = receivingLocator;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].receivingLocatorr = receivingLocatorr;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].issuingLocator = issuingLocator;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].issuingLocatorr = issuingLocatorr;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].timeperpiece = timeperpiece;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].setuptime = setuptime;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].mimimumqty = mimimumqty;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].multipleofmimimumqty = multipleofmimimumqty;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].servcostplan = servcostplan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].machinecostplan = machinecostplan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].materialcostplan = materialcostplan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].plannedcost = plannedcost;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].qty = qty;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].zssmWorkstepPrpVId = zssmWorkstepPrpVId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].indirectcostplan = indirectcostplan;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].adClientId = adClientId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].percentrejects = percentrejects;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].cProjecttaskId = cProjecttaskId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].help = help;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].zssmWorkstepVId = zssmWorkstepVId;
    objectWorkStepsECE46D9675A84540808D61E971782779Data[0].language = "";
    return objectWorkStepsECE46D9675A84540808D61E971782779Data;
  }

/**
Select for auxiliar field
 */
  public static String selectDefBAA267FE9E92450CBD4B1E645B335AEA_0(ConnectionProvider connectionProvider, String Receiving_LocatorR)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT  ( COALESCE(TO_CHAR(table1.Value), '') ) as Receiving_Locator FROM M_Locator table1 WHERE table1.isActive='Y' AND table1.M_Locator_ID = ?  ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, Receiving_LocatorR);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "receiving_locator");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

/**
Select for auxiliar field
 */
  public static String selectDef4653F635D4344A91A2D6897E7117B36C_1(ConnectionProvider connectionProvider, String CreatedByR)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as CreatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, CreatedByR);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "createdby");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

/**
Select for auxiliar field
 */
  public static String selectDef972A0F4F848D42B28029CF8FC6BC8256(ConnectionProvider connectionProvider, String C_Project_ID)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT COALESCE(MAX(SeqNo),0)+10 AS DefaultValue FROM C_ProjectTask WHERE C_Project_ID=? ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, C_Project_ID);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "defaultvalue");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

/**
Select for auxiliar field
 */
  public static String selectDef180AE6A146914989BD5EC1B93EF10A9F_2(ConnectionProvider connectionProvider, String M_Product_IDR)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT  ( COALESCE(TO_CHAR(table1.Value), '')  || ' - ' || COALESCE(TO_CHAR(table1.Name), '') ) as M_Product_ID FROM M_Product table1 WHERE table1.isActive='Y' AND table1.M_Product_ID = ?  ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, M_Product_IDR);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "m_product_id");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

/**
Select for auxiliar field
 */
  public static String selectDefCE9C6CB4D92340A781A479792D144209_3(ConnectionProvider connectionProvider, String Issuing_LocatorR)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT  ( COALESCE(TO_CHAR(table1.Value), '') ) as Issuing_Locator FROM M_Locator table1 WHERE table1.isActive='Y' AND table1.M_Locator_ID = ?  ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, Issuing_LocatorR);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "issuing_locator");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

/**
Select for auxiliar field
 */
  public static String selectDef0BA9DC7FB4D9420EADBF95E46E79A679_4(ConnectionProvider connectionProvider, String UpdatedByR)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as UpdatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  ";

    ResultSet result;
    String strReturn = "";
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, UpdatedByR);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "updatedby");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

  public int update(Connection conn, ConnectionProvider connectionProvider)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        UPDATE zssm_workstep_prp_v" +
      "        SET AD_Org_ID = (?) , IsActive = (?) , Value = (?) , Name = (?) , SeqNo = TO_NUMBER(?) , Description = (?) , Assembly = (?) , M_Product_ID = (?) , ForceMaterialScan = (?) , StartOnlyWithCompleteMaterial = (?) , Isautotriggered = (?) , isautogeneratedplan = (?) , Receiving_Locator = (?) , Issuing_Locator = (?) , Timeperpiece = TO_NUMBER(?) , Setuptime = TO_NUMBER(?) , Mimimumqty = TO_NUMBER(?) , Multipleofmimimumqty = (?) , ServCostPlan = TO_NUMBER(?) , MachineCostPlan = TO_NUMBER(?) , MaterialCostPlan = TO_NUMBER(?) , PlannedCost = TO_NUMBER(?) , Qty = TO_NUMBER(?) , Zssm_Workstep_Prp_V_ID = (?) , IndirectCostPlan = TO_NUMBER(?) , AD_Client_ID = (?) , PercentRejects = TO_NUMBER(?) , C_Projecttask_ID = (?) , Help = (?) , Zssm_Workstep_V_ID = (?) , updated = now(), updatedby = ? " +
      "        WHERE zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? " +
      "        AND zssm_workstep_prp_v.AD_Client_ID IN (";
    strSql = strSql + ((adUserClient==null || adUserClient.equals(""))?"":adUserClient);
    strSql = strSql + 
      ") " +
      "        AND zssm_workstep_prp_v.AD_Org_ID IN (";
    strSql = strSql + ((adOrgClient==null || adOrgClient.equals(""))?"":adOrgClient);
    strSql = strSql + 
      ") ";

    int updateCount = 0;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(conn, strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, adOrgId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isactive);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, value);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, name);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, seqno);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, description);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, assembly);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, mProductId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, forcematerialscan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, startonlywithcompletematerial);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isautotriggered);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isautogeneratedplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, receivingLocator);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, issuingLocator);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, timeperpiece);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, setuptime);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, mimimumqty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, multipleofmimimumqty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, servcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, machinecostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, materialcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, plannedcost);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, qty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, zssmWorkstepPrpVId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, indirectcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, adClientId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, percentrejects);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, cProjecttaskId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, help);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, zssmWorkstepVId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, updatedby);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, zssmWorkstepPrpVId);
      if (adUserClient != null && !(adUserClient.equals(""))) {
        }
      if (adOrgClient != null && !(adOrgClient.equals(""))) {
        }

      updateCount = st.executeUpdate();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releaseTransactionalPreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(updateCount);
  }

  public int insert(Connection conn, ConnectionProvider connectionProvider)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        INSERT INTO zssm_workstep_prp_v " +
      "        (AD_Org_ID, IsActive, Value, Name, SeqNo, Description, Assembly, M_Product_ID, ForceMaterialScan, StartOnlyWithCompleteMaterial, Isautotriggered, isautogeneratedplan, Receiving_Locator, Issuing_Locator, Timeperpiece, Setuptime, Mimimumqty, Multipleofmimimumqty, ServCostPlan, MachineCostPlan, MaterialCostPlan, PlannedCost, Qty, Zssm_Workstep_Prp_V_ID, IndirectCostPlan, AD_Client_ID, PercentRejects, C_Projecttask_ID, Help, Zssm_Workstep_V_ID, created, createdby, updated, updatedBy)" +
      "        VALUES ((?), (?), (?), (?), TO_NUMBER(?), (?), (?), (?), (?), (?), (?), (?), (?), (?), TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?), (?), TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?), (?), TO_NUMBER(?), (?), TO_NUMBER(?), (?), (?), (?), now(), ?, now(), ?)";

    int updateCount = 0;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(conn, strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, adOrgId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isactive);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, value);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, name);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, seqno);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, description);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, assembly);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, mProductId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, forcematerialscan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, startonlywithcompletematerial);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isautotriggered);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, isautogeneratedplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, receivingLocator);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, issuingLocator);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, timeperpiece);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, setuptime);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, mimimumqty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, multipleofmimimumqty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, servcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, machinecostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, materialcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, plannedcost);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, qty);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, zssmWorkstepPrpVId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, indirectcostplan);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, adClientId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, percentrejects);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, cProjecttaskId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, help);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, zssmWorkstepVId);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, createdby);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, updatedby);

      updateCount = st.executeUpdate();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releaseTransactionalPreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(updateCount);
  }

  public static int delete(ConnectionProvider connectionProvider, String param1, String adUserClient, String adOrgClient)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        DELETE FROM zssm_workstep_prp_v" +
      "        WHERE zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? " +
      "        AND zssm_workstep_prp_v.AD_Client_ID IN (";
    strSql = strSql + ((adUserClient==null || adUserClient.equals(""))?"":adUserClient);
    strSql = strSql + 
      ") " +
      "        AND zssm_workstep_prp_v.AD_Org_ID IN (";
    strSql = strSql + ((adOrgClient==null || adOrgClient.equals(""))?"":adOrgClient);
    strSql = strSql + 
      ") ";

    int updateCount = 0;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, param1);
      if (adUserClient != null && !(adUserClient.equals(""))) {
        }
      if (adOrgClient != null && !(adOrgClient.equals(""))) {
        }

      updateCount = st.executeUpdate();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(updateCount);
  }

  public static int deleteTransactional(Connection conn, ConnectionProvider connectionProvider, String param1)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        DELETE FROM zssm_workstep_prp_v" +
      "        WHERE zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? ";

    int updateCount = 0;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(conn, strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, param1);

      updateCount = st.executeUpdate();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releaseTransactionalPreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(updateCount);
  }

/**
Select for relation
 */
  public static String selectOrg(ConnectionProvider connectionProvider, String id)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT AD_ORG_ID" +
      "          FROM zssm_workstep_prp_v" +
      "         WHERE zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? ";

    ResultSet result;
    String strReturn = null;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, id);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "ad_org_id");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }

  public static String getCurrentDBTimestamp(ConnectionProvider connectionProvider, String id)    throws ServletException {
    String strSql = "";
    strSql = strSql + 
      "        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp" +
      "          FROM zssm_workstep_prp_v" +
      "         WHERE zssm_workstep_prp_v.Zssm_Workstep_Prp_V_ID = ? ";

    ResultSet result;
    String strReturn = null;
    PreparedStatement st = null;

    int iParameter = 0;
    try {
    st = connectionProvider.getPreparedStatement(strSql);
      iParameter++; UtilSql.setValue(st, iParameter, 12, null, id);

      result = st.executeQuery();
      if(result.next()) {
        strReturn = UtilSql.getValue(result, "updated_time_stamp");
      }
      result.close();
    } catch(SQLException e){
      log4j.error("SQL error in query: " + strSql + "Exception:"+ e);
      throw new ServletException("@CODE=" + e.getSQLState() + "@" + e.getMessage());
    } catch(Exception ex){
      log4j.error("Exception in query: " + strSql + "Exception:"+ ex);
      throw new ServletException("@CODE=@" + ex.getMessage());
    } finally {
      try {
        connectionProvider.releasePreparedStatement(st);
      } catch(Exception ignore){
        ignore.printStackTrace();
      }
    }
    return(strReturn);
  }
}
