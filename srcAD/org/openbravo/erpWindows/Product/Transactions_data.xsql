<?xml version="1.0" encoding="UTF-8"?>
<SqlClass id="class" name="TransactionsData" package="org.openbravo.erpWindows.Product">
  <SqlClassComment>WAD Generated class</SqlClassComment>

  <SqlMethod name="selectEdit" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for edit</SqlMethodComment>
    <Sql><![CDATA[
        SELECT to_char(M_Transaction.Created, ?) as created, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = M_Transaction.CreatedBy) as CreatedByR, 
        to_char(M_Transaction.Updated, ?) as updated, 
        to_char(M_Transaction.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  
        M_Transaction.UpdatedBy, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = M_Transaction.UpdatedBy) as UpdatedByR,
        M_Transaction.M_Product_ID, 
(CASE WHEN M_Transaction.M_Product_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL1.Name IS NULL THEN TO_CHAR(table1.Name) ELSE TO_CHAR(tableTRL1.Name) END)), ''))),'') ) END) AS M_Product_IDR, 
M_Transaction.QuantityOrder, 
M_Transaction.C_UOM_ID, 
(CASE WHEN M_Transaction.C_UOM_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL2.Name IS NULL THEN TO_CHAR(table2.Name) ELSE TO_CHAR(tableTRL2.Name) END)), ''))),'') ) END) AS C_UOM_IDR, 
M_Transaction.AD_Client_ID, 
(CASE WHEN M_Transaction.AD_Client_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Name), ''))),'') ) END) AS AD_Client_IDR, 
M_Transaction.AD_Org_ID, 
(CASE WHEN M_Transaction.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table4.Name), ''))),'') ) END) AS AD_Org_IDR, 
M_Transaction.M_AttributeSetInstance_ID, 
(CASE WHEN M_Transaction.M_AttributeSetInstance_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table5.Description), ''))),'') ) END) AS M_AttributeSetInstance_IDR, 
COALESCE(M_Transaction.IsActive, 'N') AS IsActive, 
M_Transaction.M_Locator_ID, 
(CASE WHEN M_Transaction.M_Locator_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table6.Value), ''))),'') ) END) AS M_Locator_IDR, 
M_Transaction.MovementQty, 
M_Transaction.MovementDate, 
M_Transaction.MovementType, 
(CASE WHEN M_Transaction.MovementType IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list1.name),'') ) END) AS MovementTypeR, 
M_Transaction.M_Internal_Consumptionline_ID, 
(CASE WHEN M_Transaction.M_Internal_Consumptionline_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table8.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table9.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL9.Name IS NULL THEN TO_CHAR(table9.Name) ELSE TO_CHAR(tableTRL9.Name) END)), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table7.MovementQty), ''))),'') ) END) AS M_Internal_Consumptionline_IDR, 
M_Transaction.M_InOutLine_ID, 
(CASE WHEN M_Transaction.M_InOutLine_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table11.DocumentNo), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(table11.MovementDate, 'DD-MM-YYYY')),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table12.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL12.Name IS NULL THEN TO_CHAR(table12.Name) ELSE TO_CHAR(tableTRL12.Name) END)), ''))),'') ) END) AS M_InOutLine_IDR, 
M_Transaction.M_InventoryLine_ID, 
(CASE WHEN M_Transaction.M_InventoryLine_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table13.Line), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table13.QtyCount), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table14.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table13.Name), ''))),'') ) END) AS M_InventoryLine_IDR, 
M_Transaction.M_MovementLine_ID, 
(CASE WHEN M_Transaction.M_MovementLine_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table15.Line), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table15.MovementQty), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table16.DocumentNo), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table16.Name), ''))),'') ) END) AS M_MovementLine_IDR, 
M_Transaction.M_ProductionLine_ID, 
M_Transaction.C_Project_ID, 
(CASE WHEN M_Transaction.C_Project_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table17.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table17.Name), ''))),'') ) END) AS C_Project_IDR, 
M_Transaction.C_Projecttask_ID, 
(CASE WHEN M_Transaction.C_Projecttask_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table18.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table19.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table19.Name), ''))),'') ) END) AS C_Projecttask_IDR, 
M_Transaction.A_Asset_ID, 
(CASE WHEN M_Transaction.A_Asset_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table20.Name), ''))),'') ) END) AS A_Asset_IDR, 
M_Transaction.M_Product_Uom_Id, 
M_Transaction.C_ProjectIssue_ID, 
M_Transaction.C_Projectphase_ID, 
M_Transaction.M_Transaction_ID, 
 
        ? AS LANGUAGE 
        FROM M_Transaction left join (select M_Product_ID, Value, Name from M_Product) table1 on (M_Transaction.M_Product_ID = table1.M_Product_ID) left join (select M_Product_ID,AD_Language, Name from M_Product_TRL) tableTRL1 on (table1.M_Product_ID = tableTRL1.M_Product_ID and tableTRL1.AD_Language = ?)  left join (select C_UOM_ID, Name from C_UOM) table2 on (M_Transaction.C_UOM_ID = table2.C_UOM_ID) left join (select C_UOM_ID,AD_Language, Name from C_UOM_TRL) tableTRL2 on (table2.C_UOM_ID = tableTRL2.C_UOM_ID and tableTRL2.AD_Language = ?)  left join (select AD_Client_ID, Name from AD_Client) table3 on (M_Transaction.AD_Client_ID = table3.AD_Client_ID) left join (select AD_Org_ID, Name from AD_Org) table4 on (M_Transaction.AD_Org_ID = table4.AD_Org_ID) left join (select M_AttributeSetInstance_ID, Description from M_AttributeSetInstance) table5 on (M_Transaction.M_AttributeSetInstance_ID = table5.M_AttributeSetInstance_ID) left join (select M_Locator_ID, Value from M_Locator) table6 on (M_Transaction.M_Locator_ID = table6.M_Locator_ID) left join ad_ref_list_v list1 on (M_Transaction.MovementType = list1.value and list1.ad_reference_id = '189' and list1.ad_language = ?)  left join (select M_Internal_Consumptionline_ID, M_Internal_Consumption_ID, M_Product_ID, MovementQty from M_Internal_Consumptionline) table7 on (M_Transaction.M_Internal_Consumptionline_ID = table7.M_Internal_Consumptionline_ID) left join (select M_Internal_Consumption_ID, Name from M_Internal_Consumption) table8 on (table7.M_Internal_Consumption_ID = table8.M_Internal_Consumption_ID) left join (select M_Product_ID, Value, Name from M_Product) table9 on (table7.M_Product_ID = table9.M_Product_ID) left join (select M_Product_ID,AD_Language, Name from M_Product_TRL) tableTRL9 on (table9.M_Product_ID = tableTRL9.M_Product_ID and tableTRL9.AD_Language = ?)  left join (select M_InOutLine_ID, M_InOut_ID, M_Product_ID from M_InOutLine) table10 on (M_Transaction.M_InOutLine_ID = table10.M_InOutLine_ID) left join (select M_InOut_ID, DocumentNo, MovementDate from M_InOut) table11 on (table10.M_InOut_ID = table11.M_InOut_ID) left join (select M_Product_ID, Value, Name from M_Product) table12 on (table10.M_Product_ID = table12.M_Product_ID) left join (select M_Product_ID,AD_Language, Name from M_Product_TRL) tableTRL12 on (table12.M_Product_ID = tableTRL12.M_Product_ID and tableTRL12.AD_Language = ?)  left join (select M_InventoryLine_ID, Line, QtyCount, M_Inventory_ID, Name from M_InventoryLine) table13 on (M_Transaction.M_InventoryLine_ID = table13.M_InventoryLine_ID) left join (select M_Inventory_ID, Name from M_Inventory) table14 on (table13.M_Inventory_ID = table14.M_Inventory_ID) left join (select M_MovementLine_ID, Line, MovementQty, M_Movement_ID from M_MovementLine) table15 on (M_Transaction.M_MovementLine_ID = table15.M_MovementLine_ID) left join (select M_Movement_ID, DocumentNo, Name from M_Movement) table16 on (table15.M_Movement_ID = table16.M_Movement_ID) left join (select C_Project_ID, Value, Name from C_Project) table17 on (M_Transaction.C_Project_ID = table17.C_Project_ID) left join (select C_Projecttask_ID, Name, C_Project_ID from C_Projecttask) table18 on (M_Transaction.C_Projecttask_ID = table18.C_Projecttask_ID) left join (select C_Project_ID, Value, Name from C_Project) table19 on (table18.C_Project_ID = table19.C_Project_ID) left join (select A_Asset_ID, Name from A_Asset) table20 on (M_Transaction.A_Asset_ID = table20.A_Asset_ID)
        WHERE 2=2 
 AND M_TRANSACTION.M_Product_ID = ?
        AND 1=1 
        AND M_Transaction.M_Transaction_ID = ? 
        AND M_Transaction.AD_Client_ID IN ('1') 
           AND M_Transaction.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="dateTimeFormat"></Parameter>
    <Parameter name="dateTimeFormat"></Parameter>
    
    <Parameter name="paramLanguage"></Parameter>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="M_PRODUCT_ID"/>


    <Parameter name="key"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="M_Transaction.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_Transaction.AD_Org_ID IN (" text="'1'"/>

    <Field name="adUserClient" value="void"></Field>
    <Field name="adOrgClient" value="void"></Field>
    <Field name="createdby" value="void"></Field>
    
    <Field name="trBgcolor" value="void"></Field>
    <Field name="totalCount" value="void"></Field>
    <Field name="dateTimeFormat" value=""></Field>
  </SqlMethod>
  
  

  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment>Create a registry</SqlMethodComment>
      <Sql></Sql>

<Parameter name="mInventorylineId"></Parameter><Parameter name="mInternalConsumptionlineId"></Parameter><Parameter name="mProductId"></Parameter><Parameter name="mProductIdr"></Parameter><Parameter name="cProjectId"></Parameter><Parameter name="mProductUomId"></Parameter><Parameter name="isactive"></Parameter><Parameter name="mAttributesetinstanceId"></Parameter><Parameter name="mAttributesetinstanceIdr"></Parameter><Parameter name="cProjectissueId"></Parameter><Parameter name="cUomId"></Parameter><Parameter name="movementqty"></Parameter><Parameter name="adClientId"></Parameter><Parameter name="cProjecttaskId"></Parameter><Parameter name="quantityorder"></Parameter><Parameter name="movementtype"></Parameter><Parameter name="mTransactionId"></Parameter><Parameter name="mMovementlineId"></Parameter><Parameter name="mLocatorId"></Parameter><Parameter name="mLocatorIdr"></Parameter><Parameter name="mInoutlineId"></Parameter><Parameter name="mInoutlineIdr"></Parameter><Parameter name="adOrgId"></Parameter><Parameter name="createdby"></Parameter><Parameter name="createdbyr"></Parameter><Parameter name="cProjectphaseId"></Parameter><Parameter name="updatedby"></Parameter><Parameter name="updatedbyr"></Parameter><Parameter name="movementdate"></Parameter><Parameter name="mProductionlineId"></Parameter><Parameter name="aAssetId"></Parameter>
   </SqlMethod>






   <SqlMethod name="selectDef3668_0" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Value), '')  || ' - ' || COALESCE(TO_CHAR(table1.Name), '') ) as M_Product_ID FROM M_Product table1 WHERE table1.isActive='Y' AND table1.M_Product_ID = ?  
    ]]></Sql>
<Parameter name="M_Product_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef9867_1" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Description), '') ) as M_AttributeSetInstance_ID FROM M_AttributeSetInstance table1 WHERE table1.isActive='Y' AND table1.M_AttributeSetInstance_ID = ?  
    ]]></Sql>
<Parameter name="M_AttributeSetInstance_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3667_2" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Value), '') ) as M_Locator_ID FROM M_Locator table1 WHERE table1.isActive='Y' AND table1.M_Locator_ID = ?  
    ]]></Sql>
<Parameter name="M_Locator_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3673_3" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table2.DocumentNo), '')  || ' - ' || COALESCE(TO_CHAR(table2.MovementDate), '')  || ' - ' || COALESCE(TO_CHAR(table3.Value), '')  || ' - ' || COALESCE(TO_CHAR(table3.Name), '') ) as M_InOutLine_ID FROM M_InOutLine table1 left join M_InOut table2 on (table1.M_InOut_ID = table2.M_InOut_ID) left join M_Product table3 on (table1.M_Product_ID = table3.M_Product_ID) WHERE table1.isActive='Y' AND table1.M_InOutLine_ID = ?  
    ]]></Sql>
<Parameter name="M_InOutLine_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3663_4" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as CreatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="CreatedByR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3665_5" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as UpdatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="UpdatedByR"/>
  </SqlMethod>










  <SqlMethod name="update" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        UPDATE M_Transaction
        SET M_Product_ID = (?) , QuantityOrder = TO_NUMBER(?) , C_UOM_ID = (?) , AD_Client_ID = (?) , AD_Org_ID = (?) , M_AttributeSetInstance_ID = (?) , IsActive = (?) , M_Locator_ID = (?) , MovementQty = TO_NUMBER(?) , MovementDate = TO_DATE(?) , MovementType = (?) , M_Internal_Consumptionline_ID = (?) , M_InOutLine_ID = (?) , M_InventoryLine_ID = (?) , M_MovementLine_ID = (?) , M_ProductionLine_ID = (?) , C_Project_ID = (?) , C_Projecttask_ID = (?) , A_Asset_ID = (?) , M_Product_Uom_Id = (?) , C_ProjectIssue_ID = (?) , C_Projectphase_ID = (?) , M_Transaction_ID = (?) , updated = now(), updatedby = ? 
        WHERE M_Transaction.M_Transaction_ID = ? 
        
        AND M_Transaction.AD_Client_ID IN ('1') 
        AND M_Transaction.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="mProductId"></Parameter> <Parameter name="quantityorder"></Parameter> <Parameter name="cUomId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="mAttributesetinstanceId"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="mLocatorId"></Parameter> <Parameter name="movementqty"></Parameter> <Parameter name="movementdate"></Parameter> <Parameter name="movementtype"></Parameter> <Parameter name="mInternalConsumptionlineId"></Parameter> <Parameter name="mInoutlineId"></Parameter> <Parameter name="mInventorylineId"></Parameter> <Parameter name="mMovementlineId"></Parameter> <Parameter name="mProductionlineId"></Parameter> <Parameter name="cProjectId"></Parameter> <Parameter name="cProjecttaskId"></Parameter> <Parameter name="aAssetId"></Parameter> <Parameter name="mProductUomId"></Parameter> <Parameter name="cProjectissueId"></Parameter> <Parameter name="cProjectphaseId"></Parameter> <Parameter name="mTransactionId"></Parameter> 
    <Parameter name="updatedby"></Parameter>
    <Parameter id="paramKey" name="mTransactionId"></Parameter>
    
    
        <Parameter name="adUserClient" type="replace" optional="true" after="M_Transaction.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_Transaction.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="insert" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        INSERT INTO M_Transaction 
        (M_Product_ID, QuantityOrder, C_UOM_ID, AD_Client_ID, AD_Org_ID, M_AttributeSetInstance_ID, IsActive, M_Locator_ID, MovementQty, MovementDate, MovementType, M_Internal_Consumptionline_ID, M_InOutLine_ID, M_InventoryLine_ID, M_MovementLine_ID, M_ProductionLine_ID, C_Project_ID, C_Projecttask_ID, A_Asset_ID, M_Product_Uom_Id, C_ProjectIssue_ID, C_Projectphase_ID, M_Transaction_ID, created, createdby, updated, updatedBy)
        VALUES ((?), TO_NUMBER(?), (?), (?), (?), (?), (?), (?), TO_NUMBER(?), TO_DATE(?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), now(), ?, now(), ?)
    ]]></Sql>
    <Parameter name="mProductId"></Parameter> <Parameter name="quantityorder"></Parameter> <Parameter name="cUomId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="mAttributesetinstanceId"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="mLocatorId"></Parameter> <Parameter name="movementqty"></Parameter> <Parameter name="movementdate"></Parameter> <Parameter name="movementtype"></Parameter> <Parameter name="mInternalConsumptionlineId"></Parameter> <Parameter name="mInoutlineId"></Parameter> <Parameter name="mInventorylineId"></Parameter> <Parameter name="mMovementlineId"></Parameter> <Parameter name="mProductionlineId"></Parameter> <Parameter name="cProjectId"></Parameter> <Parameter name="cProjecttaskId"></Parameter> <Parameter name="aAssetId"></Parameter> <Parameter name="mProductUomId"></Parameter> <Parameter name="cProjectissueId"></Parameter> <Parameter name="cProjectphaseId"></Parameter> <Parameter name="mTransactionId"></Parameter> 
    <Parameter name="createdby"></Parameter>
    <Parameter name="updatedby"></Parameter>
  </SqlMethod>

  <SqlMethod name="delete" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM M_Transaction
        WHERE M_Transaction.M_Transaction_ID = ? 
        
        AND M_Transaction.AD_Client_ID IN ('1') 
        AND M_Transaction.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
        <Parameter name="adUserClient" type="replace" optional="true" after="M_Transaction.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_Transaction.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="deleteTransactional" connection="true" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM M_Transaction
        WHERE M_Transaction.M_Transaction_ID = ? 
        
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
  </SqlMethod>
  
  <SqlMethod name="selectOrg" type="preparedStatement" return="string">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[ 
        SELECT AD_ORG_ID
          FROM M_Transaction
         WHERE M_Transaction.M_Transaction_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="getCurrentDBTimestamp" type="preparedStatement" return="string">
    <Sql><![CDATA[ 
        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp
          FROM M_Transaction
         WHERE M_Transaction.M_Transaction_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
</SqlClass>