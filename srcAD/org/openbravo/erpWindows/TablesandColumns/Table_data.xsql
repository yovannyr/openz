<?xml version="1.0" encoding="UTF-8"?>
<SqlClass id="class" name="TableData" package="org.openbravo.erpWindows.TablesandColumns">
  <SqlClassComment>WAD Generated class</SqlClassComment>

  <SqlMethod name="selectEdit" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for edit</SqlMethodComment>
    <Sql><![CDATA[
        SELECT to_char(AD_Table.Created, ?) as created, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = AD_Table.CreatedBy) as CreatedByR, 
        to_char(AD_Table.Updated, ?) as updated, 
        to_char(AD_Table.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  
        AD_Table.UpdatedBy, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = AD_Table.UpdatedBy) as UpdatedByR,
        COALESCE(AD_Table.IsView, 'N') AS IsView, 
AD_Table.PO_Window_ID, 
AD_Table.AD_Client_ID, 
(CASE WHEN AD_Table.AD_Client_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS AD_Client_IDR, 
COALESCE(AD_Table.IsDefaultAcct, 'N') AS IsDefaultAcct, 
AD_Table.AD_Org_ID, 
(CASE WHEN AD_Table.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))),'') ) END) AS AD_Org_IDR, 
AD_Table.SQL_Record_Identifier, 
AD_Table.AD_Package_ID, 
(CASE WHEN AD_Table.AD_Package_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Name), ''))),'') ) END) AS AD_Package_IDR, 
AD_Table.Name, 
AD_Table.Description, 
AD_Table.Help, 
COALESCE(AD_Table.IsActive, 'N') AS IsActive, 
AD_Table.TableName, 
AD_Table.Acctdate_Column_ID, 
AD_Table.Classname, 
AD_Table.Acctclassname, 
AD_Table.AccessLevel, 
(CASE WHEN AD_Table.AccessLevel IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list1.name),'') ) END) AS AccessLevelR, 
AD_Table.Treetype, 
(CASE WHEN AD_Table.Treetype IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list2.name),'') ) END) AS TreetypeR, 
COALESCE(AD_Table.IsChangeLog, 'N') AS IsChangeLog, 
COALESCE(AD_Table.IsDeleteable, 'N') AS IsDeleteable, 
AD_Table.Developmentstatus, 
(CASE WHEN AD_Table.Developmentstatus IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list3.name),'') ) END) AS DevelopmentstatusR, 
AD_Table.ImportTable, 
AD_Table.AD_Table_ID, 
COALESCE(AD_Table.IsHighVolume, 'N') AS IsHighVolume, 
COALESCE(AD_Table.IsSecurityEnabled, 'N') AS IsSecurityEnabled, 
AD_Table.AD_Window_ID, 
 
        ? AS LANGUAGE 
        FROM AD_Table left join (select AD_Client_ID, Name from AD_Client) table1 on (AD_Table.AD_Client_ID = table1.AD_Client_ID) left join (select AD_Org_ID, Name from AD_Org) table2 on (AD_Table.AD_Org_ID = table2.AD_Org_ID) left join (select AD_Package_ID, Name from AD_Package) table3 on (AD_Table.AD_Package_ID = table3.AD_Package_ID) left join ad_ref_list_v list1 on (AD_Table.AccessLevel = list1.value and list1.ad_reference_id = '5' and list1.ad_language = ?)  left join ad_ref_list_v list2 on (AD_Table.Treetype = list2.value and list2.ad_reference_id = '120' and list2.ad_language = ?)  left join ad_ref_list_v list3 on (AD_Table.Developmentstatus = list3.value and list3.ad_reference_id = '800103' and list3.ad_language = ?) 
        WHERE 2=2 

        AND 1=1 
        AND AD_Table.AD_Table_ID = ? 
        AND AD_Table.AD_Client_ID IN ('1') 
           AND AD_Table.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="dateTimeFormat"></Parameter>
    <Parameter name="dateTimeFormat"></Parameter>
    
    <Parameter name="paramLanguage"></Parameter>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>


    <Parameter name="key"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="AD_Table.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="AD_Table.AD_Org_ID IN (" text="'1'"/>

    <Field name="adUserClient" value="void"></Field>
    <Field name="adOrgClient" value="void"></Field>
    <Field name="createdby" value="void"></Field>
    
    <Field name="trBgcolor" value="void"></Field>
    <Field name="totalCount" value="void"></Field>
    <Field name="dateTimeFormat" value=""></Field>
  </SqlMethod>
  
  
  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[
        SELECT COALESCE(AD_Table.IsView, 'N') AS IsView, 
AD_Table.PO_Window_ID, 
AD_Table.AD_Client_ID, 
(CASE WHEN AD_Table.AD_Client_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS AD_Client_IDR, 
COALESCE(AD_Table.IsDefaultAcct, 'N') AS IsDefaultAcct, 
AD_Table.AD_Org_ID, 
(CASE WHEN AD_Table.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))),'') ) END) AS AD_Org_IDR, 
AD_Table.SQL_Record_Identifier, 
AD_Table.AD_Package_ID, 
(CASE WHEN AD_Table.AD_Package_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Name), ''))),'') ) END) AS AD_Package_IDR, 
AD_Table.Name, 
AD_Table.Description, 
AD_Table.Help, 
COALESCE(AD_Table.IsActive, 'N') AS IsActive, 
AD_Table.TableName, 
AD_Table.Acctdate_Column_ID, 
AD_Table.Classname, 
AD_Table.Acctclassname, 
AD_Table.AccessLevel, 
(CASE WHEN AD_Table.AccessLevel IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list1.name),'') ) END) AS AccessLevelR, 
AD_Table.Treetype, 
(CASE WHEN AD_Table.Treetype IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list2.name),'') ) END) AS TreetypeR, 
COALESCE(AD_Table.IsChangeLog, 'N') AS IsChangeLog, 
COALESCE(AD_Table.IsDeleteable, 'N') AS IsDeleteable, 
AD_Table.Developmentstatus, 
(CASE WHEN AD_Table.Developmentstatus IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(list3.name),'') ) END) AS DevelopmentstatusR, 
AD_Table.ImportTable, 
AD_Table.AD_Table_ID, 
COALESCE(AD_Table.IsHighVolume, 'N') AS IsHighVolume, 
COALESCE(AD_Table.IsSecurityEnabled, 'N') AS IsSecurityEnabled, 
AD_Table.AD_Window_ID, 
 
        '' AS TR_BGCOLOR, '' as total_count,
        AD_Table.Created, 
        AD_Table.CreatedBy, 
        AD_Table.CreatedBy AS CreatedByR,
        AD_Table.Updated, 
        AD_Table.UpdatedBy,
        AD_Table.UpdatedBy AS UpdatedByR,
        ? AS LANGUAGE, '' AS AD_USER_CLIENT, '' AS AD_ORG_CLIENT
        FROM AD_Table left join (select AD_Client_ID, Name from AD_Client) table1 on (AD_Table.AD_Client_ID = table1.AD_Client_ID) left join (select AD_Org_ID, Name from AD_Org) table2 on (AD_Table.AD_Org_ID = table2.AD_Org_ID) left join (select AD_Package_ID, Name from AD_Package) table3 on (AD_Table.AD_Package_ID = table3.AD_Package_ID) left join ad_ref_list_v list1 on (AD_Table.AccessLevel = list1.value and list1.ad_reference_id = '5' and list1.ad_language = ?)  left join ad_ref_list_v list2 on (AD_Table.Treetype = list2.value and list2.ad_reference_id = '120' and list2.ad_language = ?)  left join ad_ref_list_v list3 on (AD_Table.Developmentstatus = list3.value and list3.ad_reference_id = '800103' and list3.ad_language = ?) 
        WHERE 2=2 
        AND 1=1 
        AND AD_Table.AD_Client_ID IN ('1') 
        AND AD_Table.AD_Org_ID IN ('1') 

        ORDER BY 1, 1

    ]]></Sql>
    
    <Parameter name="paramLanguage"></Parameter>
    <Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>




    <Parameter name="parName" optional="true" after="1=1 "><![CDATA[ AND C_IGNORE_ACCENT(AD_Table.Name) LIKE C_IGNORE_ACCENT(?)]]></Parameter>

    <Parameter name="parTableName" optional="true" after="1=1 "><![CDATA[ AND C_IGNORE_ACCENT(AD_Table.TableName) LIKE C_IGNORE_ACCENT(?)]]></Parameter>

    <Parameter name="parAD_Package_ID" optional="true" after="1=1 "><![CDATA[ AND (AD_Table.AD_Package_ID) = (?)]]></Parameter>

    <Parameter name="parAD_Window_ID" optional="true" after="1=1 "><![CDATA[ AND (AD_Table.AD_Window_ID) = (?)]]></Parameter>


    <Parameter name="parSessionDate" optional="true" type="none" after="1=1 "> AND 1 = 1</Parameter>
    <Parameter name="parSessionUser" optional="true" type="none" after="1=1 "> AND 1 = 1</Parameter>

    <Parameter name="adUserClient" type="replace" optional="true" after="AD_Table.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="AD_Table.AD_Org_ID IN (" text="'1'"/>

    <Parameter name="orderbyclause" optional="true" type="replace" after="ORDER BY " text="1"></Parameter>
  </SqlMethod>
  

  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment>Create a registry</SqlMethodComment>
      <Sql></Sql>

<Parameter name="help"></Parameter><Parameter name="sqlRecordIdentifier"></Parameter><Parameter name="treetype"></Parameter><Parameter name="classname"></Parameter><Parameter name="developmentstatus"></Parameter><Parameter name="issecurityenabled"></Parameter><Parameter name="name"></Parameter><Parameter name="accesslevel"></Parameter><Parameter name="updatedby"></Parameter><Parameter name="updatedbyr"></Parameter><Parameter name="tablename"></Parameter><Parameter name="isdefaultacct"></Parameter><Parameter name="acctclassname"></Parameter><Parameter name="adWindowId"></Parameter><Parameter name="createdby"></Parameter><Parameter name="createdbyr"></Parameter><Parameter name="importtable"></Parameter><Parameter name="isview"></Parameter><Parameter name="adOrgId"></Parameter><Parameter name="isactive"></Parameter><Parameter name="description"></Parameter><Parameter name="adClientId"></Parameter><Parameter name="isdeleteable"></Parameter><Parameter name="ishighvolume"></Parameter><Parameter name="adPackageId"></Parameter><Parameter name="acctdateColumnId"></Parameter><Parameter name="adTableId"></Parameter><Parameter name="poWindowId"></Parameter><Parameter name="ischangelog"></Parameter>
   </SqlMethod>






   <SqlMethod name="selectDef547_0" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as UpdatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="UpdatedByR"/>
  </SqlMethod>

   <SqlMethod name="selectDef545_1" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as CreatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="CreatedByR"/>
  </SqlMethod>










  <SqlMethod name="update" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        UPDATE AD_Table
        SET IsView = (?) , PO_Window_ID = (?) , AD_Client_ID = (?) , IsDefaultAcct = (?) , AD_Org_ID = (?) , SQL_Record_Identifier = (?) , AD_Package_ID = (?) , Name = (?) , Description = (?) , Help = (?) , IsActive = (?) , TableName = (?) , Acctdate_Column_ID = (?) , Classname = (?) , Acctclassname = (?) , AccessLevel = (?) , Treetype = (?) , IsChangeLog = (?) , IsDeleteable = (?) , Developmentstatus = (?) , ImportTable = (?) , AD_Table_ID = (?) , IsHighVolume = (?) , IsSecurityEnabled = (?) , AD_Window_ID = (?) , updated = now(), updatedby = ? 
        WHERE AD_Table.AD_Table_ID = ? 
        
        AND AD_Table.AD_Client_ID IN ('1') 
        AND AD_Table.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="isview"></Parameter> <Parameter name="poWindowId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="isdefaultacct"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="sqlRecordIdentifier"></Parameter> <Parameter name="adPackageId"></Parameter> <Parameter name="name"></Parameter> <Parameter name="description"></Parameter> <Parameter name="help"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="tablename"></Parameter> <Parameter name="acctdateColumnId"></Parameter> <Parameter name="classname"></Parameter> <Parameter name="acctclassname"></Parameter> <Parameter name="accesslevel"></Parameter> <Parameter name="treetype"></Parameter> <Parameter name="ischangelog"></Parameter> <Parameter name="isdeleteable"></Parameter> <Parameter name="developmentstatus"></Parameter> <Parameter name="importtable"></Parameter> <Parameter name="adTableId"></Parameter> <Parameter name="ishighvolume"></Parameter> <Parameter name="issecurityenabled"></Parameter> <Parameter name="adWindowId"></Parameter> 
    <Parameter name="updatedby"></Parameter>
    <Parameter id="paramKey" name="adTableId"></Parameter>
    
    
        <Parameter name="adUserClient" type="replace" optional="true" after="AD_Table.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="AD_Table.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="insert" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        INSERT INTO AD_Table 
        (IsView, PO_Window_ID, AD_Client_ID, IsDefaultAcct, AD_Org_ID, SQL_Record_Identifier, AD_Package_ID, Name, Description, Help, IsActive, TableName, Acctdate_Column_ID, Classname, Acctclassname, AccessLevel, Treetype, IsChangeLog, IsDeleteable, Developmentstatus, ImportTable, AD_Table_ID, IsHighVolume, IsSecurityEnabled, AD_Window_ID, created, createdby, updated, updatedBy)
        VALUES ((?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), now(), ?, now(), ?)
    ]]></Sql>
    <Parameter name="isview"></Parameter> <Parameter name="poWindowId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="isdefaultacct"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="sqlRecordIdentifier"></Parameter> <Parameter name="adPackageId"></Parameter> <Parameter name="name"></Parameter> <Parameter name="description"></Parameter> <Parameter name="help"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="tablename"></Parameter> <Parameter name="acctdateColumnId"></Parameter> <Parameter name="classname"></Parameter> <Parameter name="acctclassname"></Parameter> <Parameter name="accesslevel"></Parameter> <Parameter name="treetype"></Parameter> <Parameter name="ischangelog"></Parameter> <Parameter name="isdeleteable"></Parameter> <Parameter name="developmentstatus"></Parameter> <Parameter name="importtable"></Parameter> <Parameter name="adTableId"></Parameter> <Parameter name="ishighvolume"></Parameter> <Parameter name="issecurityenabled"></Parameter> <Parameter name="adWindowId"></Parameter> 
    <Parameter name="createdby"></Parameter>
    <Parameter name="updatedby"></Parameter>
  </SqlMethod>

  <SqlMethod name="delete" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM AD_Table
        WHERE AD_Table.AD_Table_ID = ? 
        
        AND AD_Table.AD_Client_ID IN ('1') 
        AND AD_Table.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
        <Parameter name="adUserClient" type="replace" optional="true" after="AD_Table.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="AD_Table.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="deleteTransactional" connection="true" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM AD_Table
        WHERE AD_Table.AD_Table_ID = ? 
        
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
  </SqlMethod>
  
  <SqlMethod name="selectOrg" type="preparedStatement" return="string">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[ 
        SELECT AD_ORG_ID
          FROM AD_Table
         WHERE AD_Table.AD_Table_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="getCurrentDBTimestamp" type="preparedStatement" return="string">
    <Sql><![CDATA[ 
        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp
          FROM AD_Table
         WHERE AD_Table.AD_Table_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
</SqlClass>