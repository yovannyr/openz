<?xml version="1.0" encoding="UTF-8"?>
<SqlClass id="class" name="BankData" package="org.openbravo.erpWindows.Bank">
  <SqlClassComment>WAD Generated class</SqlClassComment>

  <SqlMethod name="selectEdit" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for edit</SqlMethodComment>
    <Sql><![CDATA[
        SELECT to_char(C_Bank.Created, ?) as created, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = C_Bank.CreatedBy) as CreatedByR, 
        to_char(C_Bank.Updated, ?) as updated, 
        to_char(C_Bank.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  
        C_Bank.UpdatedBy, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = C_Bank.UpdatedBy) as UpdatedByR,
        C_Bank.Digitcontrol, 
C_Bank.AD_Client_ID, 
(CASE WHEN C_Bank.AD_Client_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS AD_Client_IDR, 
C_Bank.AD_Org_ID, 
(CASE WHEN C_Bank.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))),'') ) END) AS AD_Org_IDR, 
C_Bank.Name, 
COALESCE(C_Bank.IsActive, 'N') AS IsActive, 
C_Bank.C_Location_ID, 
(CASE WHEN C_Bank.C_Location_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Address1), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Address2), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.Postal), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.City), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table4.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL5.Name IS NULL THEN TO_CHAR(table5.Name) ELSE TO_CHAR(tableTRL5.Name) END)), ''))),'') ) END) AS C_Location_IDR, 
C_Bank.C_BPartner_ID, 
COALESCE(C_Bank.IsOwnBank, 'N') AS IsOwnBank, 
C_Bank.Codebank, 
C_Bank.Codebranch, 
C_Bank.INE_Number, 
C_Bank.SwiftCode, 
C_Bank.RoutingNo, 
C_Bank.C_Bank_ID, 
 
        ? AS LANGUAGE 
        FROM C_Bank left join (select AD_Client_ID, Name from AD_Client) table1 on (C_Bank.AD_Client_ID = table1.AD_Client_ID) left join (select AD_Org_ID, Name from AD_Org) table2 on (C_Bank.AD_Org_ID = table2.AD_Org_ID) left join (select C_Location_ID, Address1, Address2, Postal, City, C_Region_ID, C_Country_ID from C_Location) table3 on (C_Bank.C_Location_ID = table3.C_Location_ID) left join (select C_Region_ID, Name from C_Region) table4 on (table3.C_Region_ID = table4.C_Region_ID) left join (select C_Country_ID, Name from C_Country) table5 on (table3.C_Country_ID = table5.C_Country_ID) left join (select C_Country_ID,AD_Language, Name from C_Country_TRL) tableTRL5 on (table5.C_Country_ID = tableTRL5.C_Country_ID and tableTRL5.AD_Language = ?) 
        WHERE 2=2 

        AND 1=1 
        AND C_Bank.C_Bank_ID = ? 
        AND C_Bank.AD_Client_ID IN ('1') 
           AND C_Bank.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="dateTimeFormat"></Parameter>
    <Parameter name="dateTimeFormat"></Parameter>
    
    <Parameter name="paramLanguage"></Parameter>
<Parameter name="paramLanguage"/>


    <Parameter name="key"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="C_Bank.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_Bank.AD_Org_ID IN (" text="'1'"/>

    <Field name="adUserClient" value="void"></Field>
    <Field name="adOrgClient" value="void"></Field>
    <Field name="createdby" value="void"></Field>
    
    <Field name="trBgcolor" value="void"></Field>
    <Field name="totalCount" value="void"></Field>
    <Field name="dateTimeFormat" value=""></Field>
  </SqlMethod>
  
  

  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment>Create a registry</SqlMethodComment>
      <Sql></Sql>

<Parameter name="cBankId"></Parameter><Parameter name="cBpartnerId"></Parameter><Parameter name="swiftcode"></Parameter><Parameter name="routingno"></Parameter><Parameter name="ineNumber"></Parameter><Parameter name="created"></Parameter><Parameter name="updatedby"></Parameter><Parameter name="updatedbyr"></Parameter><Parameter name="adClientId"></Parameter><Parameter name="cCountryId"></Parameter><Parameter name="cLocationId"></Parameter><Parameter name="cLocationIdr"></Parameter><Parameter name="codebank"></Parameter><Parameter name="isactive"></Parameter><Parameter name="codebranch"></Parameter><Parameter name="digitcontrol"></Parameter><Parameter name="adOrgId"></Parameter><Parameter name="isownbank"></Parameter><Parameter name="name"></Parameter><Parameter name="createdby"></Parameter><Parameter name="createdbyr"></Parameter>
   </SqlMethod>






   <SqlMethod name="selectDef3038_0" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as UpdatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="UpdatedByR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3041_1" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Address1), '')  || ' - ' || COALESCE(TO_CHAR(table1.Address2), '')  || ' - ' || COALESCE(TO_CHAR(table1.Postal), '')  || ' - ' || COALESCE(TO_CHAR(table1.City), '')  || ' - ' || COALESCE(TO_CHAR(table1.C_Region_ID), '')  || ' - ' || COALESCE(TO_CHAR(table1.C_Country_ID), '') ) as C_Location_ID FROM C_Location table1 WHERE table1.isActive='Y' AND table1.C_Location_ID = ?  
    ]]></Sql>
<Parameter name="C_Location_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3036_2" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as CreatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="CreatedByR"/>
  </SqlMethod>










  <SqlMethod name="update" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        UPDATE C_Bank
        SET Digitcontrol = (?) , AD_Client_ID = (?) , AD_Org_ID = (?) , Name = (?) , IsActive = (?) , C_Location_ID = (?) , C_BPartner_ID = (?) , IsOwnBank = (?) , Codebank = (?) , Codebranch = (?) , INE_Number = (?) , SwiftCode = (?) , C_Bank_ID = (?) , RoutingNo = (?) , updated = now(), updatedby = ? 
        WHERE C_Bank.C_Bank_ID = ? 
        
        AND C_Bank.AD_Client_ID IN ('1') 
        AND C_Bank.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="digitcontrol"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="name"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="cLocationId"></Parameter> <Parameter name="cBpartnerId"></Parameter> <Parameter name="isownbank"></Parameter> <Parameter name="codebank"></Parameter> <Parameter name="codebranch"></Parameter> <Parameter name="ineNumber"></Parameter> <Parameter name="swiftcode"></Parameter> <Parameter name="cBankId"></Parameter> <Parameter name="routingno"></Parameter> 
    <Parameter name="updatedby"></Parameter>
    <Parameter id="paramKey" name="cBankId"></Parameter>
    
    
        <Parameter name="adUserClient" type="replace" optional="true" after="C_Bank.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_Bank.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="insert" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        INSERT INTO C_Bank 
        (Digitcontrol, AD_Client_ID, AD_Org_ID, Name, IsActive, C_Location_ID, C_BPartner_ID, IsOwnBank, Codebank, Codebranch, INE_Number, SwiftCode, RoutingNo, C_Bank_ID, created, createdby, updated, updatedBy)
        VALUES ((?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), now(), ?, now(), ?)
    ]]></Sql>
    <Parameter name="digitcontrol"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="name"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="cLocationId"></Parameter> <Parameter name="cBpartnerId"></Parameter> <Parameter name="isownbank"></Parameter> <Parameter name="codebank"></Parameter> <Parameter name="codebranch"></Parameter> <Parameter name="ineNumber"></Parameter> <Parameter name="swiftcode"></Parameter> <Parameter name="routingno"></Parameter> <Parameter name="cBankId"></Parameter> 
    <Parameter name="createdby"></Parameter>
    <Parameter name="updatedby"></Parameter>
  </SqlMethod>

  <SqlMethod name="delete" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM C_Bank
        WHERE C_Bank.C_Bank_ID = ? 
        
        AND C_Bank.AD_Client_ID IN ('1') 
        AND C_Bank.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
        <Parameter name="adUserClient" type="replace" optional="true" after="C_Bank.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_Bank.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="deleteTransactional" connection="true" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM C_Bank
        WHERE C_Bank.C_Bank_ID = ? 
        
    ]]></Sql>
    <Parameter name="param1"></Parameter>
    
  </SqlMethod>
  
  <SqlMethod name="selectOrg" type="preparedStatement" return="string">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[ 
        SELECT AD_ORG_ID
          FROM C_Bank
         WHERE C_Bank.C_Bank_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="getCurrentDBTimestamp" type="preparedStatement" return="string">
    <Sql><![CDATA[ 
        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp
          FROM C_Bank
         WHERE C_Bank.C_Bank_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
</SqlClass>