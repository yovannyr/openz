<?xml version="1.0" encoding="UTF-8"?>
<SqlClass id="class" name="LinesData" package="org.openbravo.erpWindows.GoodsMovementcustomer">
  <SqlClassComment>WAD Generated class</SqlClassComment>

  <SqlMethod name="selectEdit" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for edit</SqlMethodComment>
    <Sql><![CDATA[
        SELECT to_char(M_InOutLine.Created, ?) as created, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = M_InOutLine.CreatedBy) as CreatedByR, 
        to_char(M_InOutLine.Updated, ?) as updated, 
        to_char(M_InOutLine.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  
        M_InOutLine.UpdatedBy, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = M_InOutLine.UpdatedBy) as UpdatedByR,
        M_InOutLine.AD_Client_ID, 
(CASE WHEN M_InOutLine.AD_Client_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS AD_Client_IDR, 
M_InOutLine.AD_Org_ID, 
(CASE WHEN M_InOutLine.AD_Org_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))),'') ) END) AS AD_Org_IDR, 
M_InOutLine.M_InOut_ID, 
(CASE WHEN M_InOutLine.M_InOut_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table3.DocumentNo), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(table3.MovementDate, 'DD-MM-YYYY')),'') ) END) AS M_InOut_IDR, 
M_InOutLine.C_OrderLine_ID, 
(CASE WHEN M_InOutLine.C_OrderLine_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table5.DocumentNo), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table5.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(table5.DateOrdered, 'DD-MM-YYYY')),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table5.GrandTotal), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table4.Line), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table4.LineNetAmt), ''))),'') ) END) AS C_OrderLine_IDR, 
M_InOutLine.Description, 
M_InOutLine.Line, 
M_InOutLine.M_Locator_ID, 
(CASE WHEN M_InOutLine.M_Locator_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table6.Value), ''))),'') ) END) AS M_Locator_IDR, 
M_InOutLine.M_Product_ID, 
(CASE WHEN M_InOutLine.M_Product_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table7.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL7.Name IS NULL THEN TO_CHAR(table7.Name) ELSE TO_CHAR(tableTRL7.Name) END)), ''))),'') ) END) AS M_Product_IDR, 
M_InOutLine.M_AttributeSetInstance_ID, 
(CASE WHEN M_InOutLine.M_AttributeSetInstance_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table8.Description), ''))),'') ) END) AS M_AttributeSetInstance_IDR, 
COALESCE(M_InOutLine.IsDescription, 'N') AS IsDescription, 
M_InOutLine.QuantityOrder, 
M_InOutLine.M_Product_Uom_Id, 
(CASE WHEN M_InOutLine.M_Product_Uom_Id IS NULL THEN '' ELSE  ( COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL10.Name IS NULL THEN TO_CHAR(table10.Name) ELSE TO_CHAR(tableTRL10.Name) END)), ''))),'') ) END) AS M_Product_Uom_IdR, 
M_InOutLine.MovementQty, 
M_InOutLine.Boxnumber, 
M_InOutLine.C_UOM_ID, 
(CASE WHEN M_InOutLine.C_UOM_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR((CASE WHEN tableTRL11.Name IS NULL THEN TO_CHAR(table11.Name) ELSE TO_CHAR(tableTRL11.Name) END)), ''))),'') ) END) AS C_UOM_IDR, 
M_InOutLine.C_Project_ID, 
(CASE WHEN M_InOutLine.C_Project_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table12.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table12.Name), ''))),'') ) END) AS C_Project_IDR, 
M_InOutLine.C_Projecttask_ID, 
(CASE WHEN M_InOutLine.C_Projecttask_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table13.Name), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table14.Value), ''))),'')  || ' - ' || COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table14.Name), ''))),'') ) END) AS C_Projecttask_IDR, 
M_InOutLine.Upc, 
COALESCE(M_InOutLine.IsInvoiced, 'N') AS IsInvoiced, 
COALESCE(M_InOutLine.IsActive, 'N') AS IsActive, 
M_InOutLine.M_InOutLine_ID, 
 
        ? AS LANGUAGE 
        FROM M_InOutLine left join (select AD_Client_ID, Name from AD_Client) table1 on (M_InOutLine.AD_Client_ID = table1.AD_Client_ID) left join (select AD_Org_ID, Name from AD_Org) table2 on (M_InOutLine.AD_Org_ID = table2.AD_Org_ID) left join (select M_InOut_ID, DocumentNo, MovementDate from M_InOut) table3 on (M_InOutLine.M_InOut_ID = table3.M_InOut_ID) left join (select C_OrderLine_ID, C_Order_ID, Line, LineNetAmt from C_OrderLine) table4 on (M_InOutLine.C_OrderLine_ID = table4.C_OrderLine_ID) left join (select C_Order_ID, DocumentNo, Name, DateOrdered, GrandTotal from C_Order) table5 on (table4.C_Order_ID = table5.C_Order_ID) left join (select M_Locator_ID, Value from M_Locator) table6 on (M_InOutLine.M_Locator_ID = table6.M_Locator_ID) left join (select M_Product_ID, Value, Name from M_Product) table7 on (M_InOutLine.M_Product_ID = table7.M_Product_ID) left join (select M_Product_ID,AD_Language, Name from M_Product_TRL) tableTRL7 on (table7.M_Product_ID = tableTRL7.M_Product_ID and tableTRL7.AD_Language = ?)  left join (select M_AttributeSetInstance_ID, Description from M_AttributeSetInstance) table8 on (M_InOutLine.M_AttributeSetInstance_ID = table8.M_AttributeSetInstance_ID) left join (select M_Product_Uom_Id, C_UOM_ID from M_Product_UOM) table9 on (M_InOutLine.M_Product_Uom_Id =  table9.M_Product_Uom_Id) left join (select C_UOM_ID, Name from C_UOM) table10 on (table9.C_UOM_ID = table10.C_UOM_ID) left join (select C_UOM_ID,AD_Language, Name from C_UOM_TRL) tableTRL10 on (table10.C_UOM_ID = tableTRL10.C_UOM_ID and tableTRL10.AD_Language = ?)  left join (select C_UOM_ID, Name from C_UOM) table11 on (M_InOutLine.C_UOM_ID = table11.C_UOM_ID) left join (select C_UOM_ID,AD_Language, Name from C_UOM_TRL) tableTRL11 on (table11.C_UOM_ID = tableTRL11.C_UOM_ID and tableTRL11.AD_Language = ?)  left join (select C_Project_ID, Value, Name from C_Project) table12 on (M_InOutLine.C_Project_ID = table12.C_Project_ID) left join (select C_Projecttask_ID, Name, C_Project_ID from C_Projecttask) table13 on (M_InOutLine.C_Projecttask_ID = table13.C_Projecttask_ID) left join (select C_Project_ID, Value, Name from C_Project) table14 on (table13.C_Project_ID = table14.C_Project_ID)
        WHERE 2=2 

        AND 1=1 
        AND M_InOutLine.M_InOutLine_ID = ? 
        AND M_InOutLine.AD_Client_ID IN ('1') 
           AND M_InOutLine.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="dateTimeFormat"></Parameter>
    <Parameter name="dateTimeFormat"></Parameter>
    
    <Parameter name="paramLanguage"></Parameter>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>
<Parameter name="paramLanguage"/>

    <Parameter name="mInoutId" optional="true" after="AND 1=1 " id="paramKeyParent"> AND M_InOutLine.M_InOut_ID = ? </Parameter>
    <Parameter name="key"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="M_InOutLine.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_InOutLine.AD_Org_ID IN (" text="'1'"/>

    <Field name="adUserClient" value="void"></Field>
    <Field name="adOrgClient" value="void"></Field>
    <Field name="createdby" value="void"></Field>
    
    <Field name="trBgcolor" value="void"></Field>
    <Field name="totalCount" value="void"></Field>
    <Field name="dateTimeFormat" value=""></Field>
  </SqlMethod>
  
  

  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment>Create a registry</SqlMethodComment>
      <Sql></Sql>
    <Parameter name="mInoutId" id="paramKeyParent"></Parameter>
<Parameter name="line"></Parameter><Parameter name="movementqty"></Parameter><Parameter name="mLocatorId"></Parameter><Parameter name="mLocatorIdr"></Parameter><Parameter name="mInoutlineId"></Parameter><Parameter name="mInoutIdr"></Parameter><Parameter name="mProductUomId"></Parameter><Parameter name="cUomId"></Parameter><Parameter name="updatedby"></Parameter><Parameter name="updatedbyr"></Parameter><Parameter name="cOrderlineId"></Parameter><Parameter name="cOrderlineIdr"></Parameter><Parameter name="isdescription"></Parameter><Parameter name="mAttributesetinstanceId"></Parameter><Parameter name="mAttributesetinstanceIdr"></Parameter><Parameter name="cProjecttaskId"></Parameter><Parameter name="isinvoiced"></Parameter><Parameter name="mProductId"></Parameter><Parameter name="mProductIdr"></Parameter><Parameter name="cProjectId"></Parameter><Parameter name="cProjectIdr"></Parameter><Parameter name="quantityorder"></Parameter><Parameter name="isactive"></Parameter><Parameter name="adOrgId"></Parameter><Parameter name="boxnumber"></Parameter><Parameter name="createdby"></Parameter><Parameter name="createdbyr"></Parameter><Parameter name="adClientId"></Parameter><Parameter name="upc"></Parameter><Parameter name="description"></Parameter>
   </SqlMethod>


   <SqlMethod name="selectAux800009" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT (CASE COUNT(*) WHEN 0 THEN 0 ELSE 1 END) AS TOTAL FROM M_PRODUCT_UOM WHERE M_PRODUCT_ID=? 
    ]]></Sql>

<Parameter name="M_Product_ID"/>
  </SqlMethod>

   <SqlMethod name="selectAuxB4A64414F61A4901A24A5B968FEE309A" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT PROCESSED FROM M_INOUT WHERE M_INOUT_ID = ? 
    ]]></Sql>

<Parameter name="M_INOUT_ID"/>
  </SqlMethod>





   <SqlMethod name="selectDef3810" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM M_InOutLine WHERE M_InOut_ID=? 
    ]]></Sql>

<Parameter name="M_InOut_ID"/>
  </SqlMethod>

   <SqlMethod name="selectDef3537_0" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Value), '') ) as M_Locator_ID FROM M_Locator table1 WHERE table1.isActive='Y' AND table1.M_Locator_ID = ?  
    ]]></Sql>
<Parameter name="M_Locator_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3538_1" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.DocumentNo), '')  || ' - ' || COALESCE(TO_CHAR(table1.MovementDate), '') ) as M_InOut_ID FROM M_InOut table1 WHERE table1.isActive='Y' AND table1.M_InOut_ID = ?  
    ]]></Sql>
<Parameter name="M_InOut_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3536_2" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as UpdatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="UpdatedByR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3811_3" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table2.DocumentNo), '')  || ' - ' || COALESCE(TO_CHAR(table2.Name), '')  || ' - ' || COALESCE(TO_CHAR(table2.DateOrdered), '')  || ' - ' || COALESCE(TO_CHAR(table2.GrandTotal), '')  || ' - ' || COALESCE(TO_CHAR(table1.Line), '')  || ' - ' || COALESCE(TO_CHAR(table1.LineNetAmt), '') ) as C_OrderLine_ID FROM C_OrderLine table1 left join C_Order table2 on (table1.C_Order_ID = table2.C_Order_ID) WHERE table1.isActive='Y' AND table1.C_OrderLine_ID = ?  
    ]]></Sql>
<Parameter name="C_OrderLine_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef8772_4" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Description), '') ) as M_AttributeSetInstance_ID FROM M_AttributeSetInstance table1 WHERE table1.isActive='Y' AND table1.M_AttributeSetInstance_ID = ?  
    ]]></Sql>
<Parameter name="M_AttributeSetInstance_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDefB219CD429DB14019BD3C1F903F141CD7" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT c_projecttask_id AS DefaultValue FROM m_inout WHERE m_inout_ID=? 
    ]]></Sql>

<Parameter name="m_inout_ID"/>
  </SqlMethod>

   <SqlMethod name="selectDef3539_5" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Value), '')  || ' - ' || COALESCE(TO_CHAR(table1.Name), '') ) as M_Product_ID FROM M_Product table1 WHERE table1.isActive='Y' AND table1.M_Product_ID = ?  
    ]]></Sql>
<Parameter name="M_Product_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDefFBFB0E5EAC68403BAA422D3D2EBF1CB8" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT c_project_id AS DefaultValue FROM m_inout WHERE m_inout_ID=? 
    ]]></Sql>

<Parameter name="m_inout_ID"/>
  </SqlMethod>

   <SqlMethod name="selectDefFBFB0E5EAC68403BAA422D3D2EBF1CB8_6" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Value), '')  || ' - ' || COALESCE(TO_CHAR(table1.Name), '') ) as C_Project_ID FROM C_Project table1 WHERE table1.isActive='Y' AND table1.C_Project_ID = ?  
    ]]></Sql>
<Parameter name="C_Project_IDR"/>
  </SqlMethod>

   <SqlMethod name="selectDef3534_7" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(table1.Name), '') ) as CreatedBy FROM AD_User table1 WHERE table1.isActive='Y' AND table1.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="CreatedByR"/>
  </SqlMethod>



  <SqlMethod name="selectParentID" type="preparedStatement" return="String" default="">
    <SqlMethodComment>return the parent ID</SqlMethodComment>
    <Sql><![CDATA[
        SELECT M_InOutLine.M_InOut_ID AS NAME
        FROM M_InOutLine
        WHERE M_InOutLine.M_InOutLine_ID = ?
    ]]></Sql>
    <Parameter name="key"></Parameter>
  </SqlMethod>

   <SqlMethod name="selectParent" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for parent field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT (TO_CHAR(COALESCE(TO_CHAR(table1.DocumentNo), '')) || ' - ' || TO_CHAR(table1.MovementDate, 'DD-MM-YYYY')) AS NAME FROM M_InOut left join (select M_InOut_ID, DocumentNo, MovementDate from M_InOut) table1 on (M_InOut.M_InOut_ID = table1.M_InOut_ID) WHERE M_InOut.M_InOut_ID = ?  
    ]]></Sql>
<Parameter name="mInoutId"/>

  </SqlMethod>



   <SqlMethod name="selectParentTrl" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for parent field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT (TO_CHAR(COALESCE(TO_CHAR(table1.DocumentNo), '')) || ' - ' || TO_CHAR(table1.MovementDate, 'DD-MM-YYYY')) AS NAME FROM M_InOut left join (select M_InOut_ID, DocumentNo, MovementDate from M_InOut) table1 on (M_InOut.M_InOut_ID = table1.M_InOut_ID) WHERE M_InOut.M_InOut_ID = ?  
    ]]></Sql>
<Parameter name="mInoutId"/>

  </SqlMethod>








  <SqlMethod name="update" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        UPDATE M_InOutLine
        SET AD_Client_ID = (?) , AD_Org_ID = (?) , M_InOut_ID = (?) , C_OrderLine_ID = (?) , Description = (?) , Line = TO_NUMBER(?) , M_Locator_ID = (?) , M_Product_ID = (?) , M_AttributeSetInstance_ID = (?) , IsDescription = (?) , QuantityOrder = TO_NUMBER(?) , M_Product_Uom_Id = (?) , MovementQty = TO_NUMBER(?) , Boxnumber = (?) , C_UOM_ID = (?) , C_Project_ID = (?) , C_Projecttask_ID = (?) , Upc = (?) , IsInvoiced = (?) , IsActive = (?) , M_InOutLine_ID = (?) , updated = now(), updatedby = ? 
        WHERE M_InOutLine.M_InOutLine_ID = ? 
                 AND M_InOutLine.M_InOut_ID = ? 
        AND M_InOutLine.AD_Client_ID IN ('1') 
        AND M_InOutLine.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="mInoutId"></Parameter> <Parameter name="cOrderlineId"></Parameter> <Parameter name="description"></Parameter> <Parameter name="line"></Parameter> <Parameter name="mLocatorId"></Parameter> <Parameter name="mProductId"></Parameter> <Parameter name="mAttributesetinstanceId"></Parameter> <Parameter name="isdescription"></Parameter> <Parameter name="quantityorder"></Parameter> <Parameter name="mProductUomId"></Parameter> <Parameter name="movementqty"></Parameter> <Parameter name="boxnumber"></Parameter> <Parameter name="cUomId"></Parameter> <Parameter name="cProjectId"></Parameter> <Parameter name="cProjecttaskId"></Parameter> <Parameter name="upc"></Parameter> <Parameter name="isinvoiced"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="mInoutlineId"></Parameter> 
    <Parameter name="updatedby"></Parameter>
    <Parameter id="paramKey" name="mInoutlineId"></Parameter>
    
    <Parameter name="mInoutId" id="paramKeyParent"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="M_InOutLine.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_InOutLine.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="insert" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        INSERT INTO M_InOutLine 
        (AD_Client_ID, AD_Org_ID, M_InOut_ID, C_OrderLine_ID, Description, Line, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID, IsDescription, QuantityOrder, M_Product_Uom_Id, MovementQty, Boxnumber, C_UOM_ID, C_Project_ID, C_Projecttask_ID, Upc, IsInvoiced, IsActive, M_InOutLine_ID, created, createdby, updated, updatedBy)
        VALUES ((?), (?), (?), (?), (?), TO_NUMBER(?), (?), (?), (?), (?), TO_NUMBER(?), (?), TO_NUMBER(?), (?), (?), (?), (?), (?), (?), (?), (?), now(), ?, now(), ?)
    ]]></Sql>
    <Parameter name="adClientId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="mInoutId"></Parameter> <Parameter name="cOrderlineId"></Parameter> <Parameter name="description"></Parameter> <Parameter name="line"></Parameter> <Parameter name="mLocatorId"></Parameter> <Parameter name="mProductId"></Parameter> <Parameter name="mAttributesetinstanceId"></Parameter> <Parameter name="isdescription"></Parameter> <Parameter name="quantityorder"></Parameter> <Parameter name="mProductUomId"></Parameter> <Parameter name="movementqty"></Parameter> <Parameter name="boxnumber"></Parameter> <Parameter name="cUomId"></Parameter> <Parameter name="cProjectId"></Parameter> <Parameter name="cProjecttaskId"></Parameter> <Parameter name="upc"></Parameter> <Parameter name="isinvoiced"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="mInoutlineId"></Parameter> 
    <Parameter name="createdby"></Parameter>
    <Parameter name="updatedby"></Parameter>
  </SqlMethod>

  <SqlMethod name="delete" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM M_InOutLine
        WHERE M_InOutLine.M_InOutLine_ID = ? 
                 AND M_InOutLine.M_InOut_ID = ? 
        AND M_InOutLine.AD_Client_ID IN ('1') 
        AND M_InOutLine.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
        <Parameter name="mInoutId" id="paramKeyParent"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="M_InOutLine.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="M_InOutLine.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="deleteTransactional" connection="true" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM M_InOutLine
        WHERE M_InOutLine.M_InOutLine_ID = ? 
                 AND M_InOutLine.M_InOut_ID = ? 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
        <Parameter name="mInoutId" id="paramKeyParent"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="selectOrg" type="preparedStatement" return="string">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[ 
        SELECT AD_ORG_ID
          FROM M_InOutLine
         WHERE M_InOutLine.M_InOutLine_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="getCurrentDBTimestamp" type="preparedStatement" return="string">
    <Sql><![CDATA[ 
        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp
          FROM M_InOutLine
         WHERE M_InOutLine.M_InOutLine_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
</SqlClass>