<?xml version="1.0" encoding="UTF-8" ?>
<!--
 ******************************************************************************
 * The contents of this file are subject to the   Compiere License  Version 1.1
 * ("License"); You may not use this file except in compliance with the License
 * You may obtain a copy of the License at http://www.compiere.org/license.html
 * Software distributed under the License is distributed on an  "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * The Original Code is                  Compiere  ERP & CRM  Business Solution
 * The Initial Developer of the Original Code is Jorg Janke  and ComPiere, Inc.
 * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke, parts
 * created by ComPiere are Copyright (C) ComPiere, Inc.;   All Rights Reserved.
 * Contributor(s): Openbravo SL
 * Contributions are Copyright (C) 2001-2006 Openbravo S.L.
 ******************************************************************************
-->


<SqlClass name="ImportAccountData" package="org.openbravo.erpCommon.ad_process">

  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT I_ElementValue_ID, AD_Client_ID, AD_Org_ID, IsActive, Updated, UpdatedBy, C_ElementValue_ID,
			Description, Default_Account, '' as IsFullyQualified, '' as C_AcctSchema_ID, '' as M_Product_ID, '' as C_BPartner_ID,
			'' as message, ParentElementValue_ID, '' as AD_Tree_ID, '' as Info, '' as Alias, '' as Combination,
			'' as TableName, '' as ColumnName, '' as Account_ID, '' as AD_OrgTrx_ID, '' as C_ValidCombination_ID,
			'' as Created, '' as CreatedBy, '' as C_LocFrom_ID, '' as C_LocTo_ID, '' as C_SalesRegion_ID, '' as C_Project_ID,
			'' as C_Campaign_ID, '' as C_Activity_ID, '' as User1_ID, '' as User2_ID, '' as operands, '' as value, '' as SeqNo
      FROM I_ElementValue WHERE I_IsImported='N'
      AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="deleteOld" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      DELETE FROM I_ElementValue WHERE I_IsImported='Y'
      AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateRecords" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET AD_Client_ID = COALESCE (AD_Client_ID, ?),
          AD_Org_ID = COALESCE (AD_Org_ID, '0'),
          IsActive = COALESCE (IsActive, 'Y'),
          Created = COALESCE (Created, now()),
          CreatedBy = COALESCE (CreatedBy, '0'),
          Updated = COALESCE (Updated, now()),
          UpdatedBy = COALESCE (UpdatedBy, '0'),
          I_ErrorMsg = NULL,
          I_IsImported = 'N'
        WHERE I_IsImported<>'Y'
        OR I_IsImported IS NULL
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateElement" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET ElementName = (
          SELECT Name
          FROM C_Element
          WHERE C_Element_ID = ?
        )
        WHERE ElementName IS NULL
        AND C_Element_ID IS NULL
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="cElementId"/>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateIdByName" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET C_Element_ID = (
          SELECT C_Element_ID FROM C_Element e
          WHERE I_ElementValue.ElementName=e.Name
          AND I_ElementValue.AD_Client_ID=e.AD_Client_ID
        )
        WHERE C_Element_ID IS NULL
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateElementError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg='ERR=Invalid Element, '
        WHERE C_Element_ID IS NULL
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateColumn" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET AD_Column_ID = (
          SELECT AD_Column_ID
          FROM AD_Column c
          WHERE UPPER(I_ElementValue.Default_Account)=UPPER(c.ColumnName)
          AND c.AD_Table_ID IN ('315','266')
          AND AD_Reference_value_ID='25'
        )
        WHERE Default_Account IS NOT NULL
        AND AD_Column_ID IS NULL
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateColumnError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||'ERR=Invalid Column, '
        WHERE AD_Column_ID IS NULL
        AND Default_Account IS NOT NULL
        AND UPPER(Default_Account)<>'DEFAULT_ACCT'
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateYColumns" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET isActive='Y'
        WHERE isActive IS NULL
        OR isActive NOT IN ('Y','N')
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="column" optional="true" type="replace" after="SET " text="isActive"/>
    <Parameter name="column" optional="true" type="replace" after="WHERE " text="isActive"/>
    <Parameter name="column" optional="true" type="replace" after="OR " text="isActive"/>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateSummary" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET IsSummary='N'
        WHERE IsSummary IS NULL
        OR IsSummary NOT IN ('Y','N')
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateDocControlled" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET IsDocControlled =
        CASE
          WHEN AD_Column_ID IS NOT NULL THEN 'Y'
          ELSE 'N' END
        WHERE IsDocControlled IS NULL
        OR IsDocControlled NOT IN ('Y','N')
        AND I_IsImported='N'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateAccountType" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET AccountType = substr(coalesce(AccountType,'E'),1,1)
        WHERE I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateAccountTypeError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||'ERR=Invalid AccountType, '
        WHERE substr(AccountType,1,1) NOT IN ('A','E','L','M','O','R')
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateAccountSign" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET AccountSign = substr(coalesce(AccountSign,'N'),1,1)
        WHERE I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateAccountSignError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||'ERR=Invalid AccountSign, '
        WHERE substr(AccountSign,1,1) NOT IN ('N','C','D')
        AND I_IsImported<>'Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateElementValue" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET C_ElementValue_ID = (
          SELECT C_ElementValue_ID
          FROM C_ElementValue ev
          INNER JOIN C_Element e ON (ev.C_Element_ID=e.C_Element_ID)
          WHERE I_ElementValue.C_Element_ID=e.C_Element_ID
          AND I_ElementValue.AD_Client_ID=e.AD_Client_ID
          AND I_ElementValue.Value=ev.Value
        )
        WHERE C_ElementValue_ID IS NULL
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateCElementValueID" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET C_ElementValue_ID = (
          SELECT C_ElementValue_ID
          FROM C_ElementValue ev
          INNER JOIN C_Element e ON (ev.C_Element_ID=e.C_Element_ID)
          WHERE I_ElementValue.C_Element_ID=e.C_Element_ID
          AND I_ElementValue.AD_Client_ID=e.AD_Client_ID
          AND I_ElementValue.Value=ev.Value
        )
        WHERE C_ElementValue_ID IS NULL
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="disableTriggers" type="callableStatement" connection="true" return="object" object="ImportAccountData">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        ALTER TABLE C_ValidCombination DISABLE ALL TRIGGERS
      ]]>
    </Sql>
  </SqlMethod>

  <SqlMethod name="enableTriggers" type="callableStatement" connection="true" return="object" object="ImportAccountData">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        ALTER TABLE C_ValidCombination ENABLE ALL TRIGGERS
      ]]>
    </Sql>
  </SqlMethod>

  <SqlMethod name="selectRecords" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT I_ElementValue_ID, C_ElementValue_ID, value, default_account
        FROM I_ElementValue
        WHERE I_IsImported='N'
        AND AD_Client_ID=?
        ORDER BY I_ElementValue_ID
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="selectOperands" type="preparedStatement" connection="true" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT operands
        FROM I_ElementValue
        WHERE I_ElementValue_ID = ?
      ]]>
    </Sql>
    <Parameter name="iElementValueId"/>
  </SqlMethod>

  <SqlMethod name="selectAccount" type="preparedStatement" connection="true" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT c_elementvalue_id
        FROM c_ElementValue
        WHERE value = ?
        and ad_client_id = ?
        AND C_ELEMENT_ID = ?
      ]]>
    </Sql>
    <Parameter name="value"/>
    <Parameter name="client"/>
    <Parameter name="element"/>
  </SqlMethod>

  <SqlMethod name="selectDefaultsRecord" type="preparedStatement" connection="true" return="String">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT COUNT(1) AS COUNT
        FROM c_acctschema_default
        WHERE c_acctschema_ID = ?
      ]]>
    </Sql>
    <Parameter name="value"/>
  </SqlMethod>

  <SqlMethod name="selectGLRecord" type="preparedStatement" connection="true" return="String">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT COUNT(1) AS COUNT
        FROM c_acctschema_gl
        WHERE c_acctschema_ID = ?
      ]]>
    </Sql>
    <Parameter name="value"/>
  </SqlMethod>

  <SqlMethod name="insertElementValue" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        INSERT INTO C_ElementValue (C_ElementValue_ID,C_Element_ID,
          AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,
          Value,Name,Description, AccountType,AccountSign,IsDocControlled,
          IsSummary,PostActual,PostBudget,PostEncumbrance,PostStatistical, elementlevel)
        SELECT ?,C_Element_ID,
          AD_Client_ID,AD_Org_ID,'Y',now(),CreatedBy,now(),UpdatedBy,
          Value,Name,Description, AccountType,AccountSign,IsDocControlled,
          IsSummary,PostActual,PostBudget,PostEncumbrance,PostStatistical, coalesce(elementlevel,'S')
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="cElementvalueId"/>
    <Parameter name="iElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="insertGLRecord" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        INSERT INTO C_ACCTSCHEMA_GL (C_ACCTSCHEMA_ID, C_ACCTSCHEMA_GL_ID, AD_CLIENT_ID, AD_ORG_ID,ISACTIVE, CREATED, CREATEDBY,
           UPDATED, UPDATEDBY, USESUSPENSEBALANCING, SUSPENSEBALANCING_ACCT, USESUSPENSEERROR, SUSPENSEERROR_ACCT,
           USECURRENCYBALANCING, CURRENCYBALANCING_ACCT, RETAINEDEARNING_ACCT,INCOMESUMMARY_ACCT, INTERCOMPANYDUETO_ACCT,
           INTERCOMPANYDUEFROM_ACCT,PPVOFFSET_ACCT, CFS_ORDER_ACCT)
        VALUES (?, GET_UUID(), ?, ?, 'Y', now(), ?,
            now(), ?, 'N', ?, 'N', ?,
            'N', ?, ?, ?, ?,
            ?, ?, ?)
      ]]>
    </Sql>
    <Parameter name="cAcctschemaId"/>
    <Parameter name="client"/>
    <Parameter name="org"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <!--Parameter name="USESUSPENSEBALANCING"/-->
    <Parameter name="SUSPENSEBALANCING_ACCT"/>
    <!--Parameter name="USESUSPENSEERROR"/-->
    <Parameter name="SUSPENSEERROR_ACCT"/>
    <!--Parameter name="USECURRENCYBALANCING"/-->
    <Parameter name="CURRENCYBALANCING_ACCT"/>
    <Parameter name="RETAINEDEARNING_ACCT"/>
    <Parameter name="INCOMESUMMARY_ACCT"/>
    <Parameter name="INTERCOMPANYDUETO_ACCT"/>
    <Parameter name="INTERCOMPANYDUEFROM_ACCT"/>
    <Parameter name="PPVOFFSET_ACCT"/>
    <Parameter name="CFS_ORDER_ACCT"/>
  </SqlMethod>

  <SqlMethod name="insertDefaultsRecord" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
           INSERT INTO C_ACCTSCHEMA_DEFAULT (C_ACCTSCHEMA_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
           W_INVENTORY_ACCT, W_INVACTUALADJUST_ACCT, W_DIFFERENCES_ACCT, W_REVALUATION_ACCT,
           P_REVENUE_ACCT, P_EXPENSE_ACCT, P_ASSET_ACCT,P_PURCHASEPRICEVARIANCE_ACCT, P_INVOICEPRICEVARIANCE_ACCT, P_TRADEDISCOUNTREC_ACCT,
           P_TRADEDISCOUNTGRANT_ACCT, P_COGS_ACCT, C_RECEIVABLE_ACCT,C_PREPAYMENT_ACCT, V_LIABILITY_ACCT, V_LIABILITY_SERVICES_ACCT,
           V_PREPAYMENT_ACCT, PAYDISCOUNT_EXP_ACCT, WRITEOFF_ACCT
           , PAYDISCOUNT_REV_ACCT, UNREALIZEDGAIN_ACCT, UNREALIZEDLOSS_ACCT,
           REALIZEDGAIN_ACCT, REALIZEDLOSS_ACCT, WITHHOLDING_ACCT, E_PREPAYMENT_ACCT
           , E_EXPENSE_ACCT, PJ_ASSET_ACCT,
           PJ_WIP_ACCT, T_EXPENSE_ACCT, T_LIABILITY_ACCT, T_RECEIVABLES_ACCT, T_DUE_ACCT, T_CREDIT_ACCT,
           B_INTRANSIT_ACCT, B_ASSET_ACCT, B_EXPENSE_ACCT,B_INTERESTREV_ACCT, B_INTERESTEXP_ACCT, B_UNIDENTIFIED_ACCT,
           B_UNALLOCATEDCASH_ACCT, B_PAYMENTSELECT_ACCT, B_SETTLEMENTGAIN_ACCT, B_SETTLEMENTLOSS_ACCT, B_REVALUATIONGAIN_ACCT, B_REVALUATIONLOSS_ACCT,
           CH_EXPENSE_ACCT, CH_REVENUE_ACCT, UNEARNEDREVENUE_ACCT, NOTINVOICEDRECEIVABLES_ACCT, NOTINVOICEDREVENUE_ACCT, NOTINVOICEDRECEIPTS_ACCT,
           CB_ASSET_ACCT, CB_CASHTRANSFER_ACCT, CB_DIFFERENCES_ACCT,CB_EXPENSE_ACCT, CB_RECEIPT_ACCT, PROCESSING,
           A_ACCUMDEPRECIATION_ACCT, A_DEPRECIATION_ACCT, A_DISPOSAL_GAIN,A_DISPOSAL_LOSS, C_ACCTSCHEMA_DEFAULT_ID)
          VALUES (?, ?, ?, 'Y',now() ,?,now() ,? ,
        ? ,? ,? ,? ,
        ? ,? ,? ,? ,? ,? ,
        ? ,? ,? ,? ,? ,? ,
        ? ,? ,? ,
        ? ,? ,? ,
        ? ,? ,? ,? ,
        ? ,? ,
        ? ,? ,? ,? ,? ,? ,
        ? ,? ,? ,? ,? , ?,
        ? ,? ,? ,? ,? ,? ,
        ? ,? ,? ,? ,? ,? ,
        ? ,? ,? ,? ,? ,'N' ,
        ? ,? ,? ,? ,?)
      ]]>
    </Sql>
    <Parameter name="cAcctschemaId"/>
    <Parameter name="client"/>
    <Parameter name="org"/>
    <Parameter name="user"/>
    <Parameter name="user"/>

    <Parameter name="W_INVENTORY_ACCT"/>
    <Parameter name="W_INVACTUALADJUST_ACCT"/>
    <Parameter name="W_DIFFERENCES_ACCT"/>
    <Parameter name="W_REVALUATION_ACCT"/>

    <Parameter name="P_REVENUE_ACCT"/>
    <Parameter name="P_EXPENSE_ACCT"/>
    <Parameter name="P_ASSET_ACCT"/>
    <Parameter name="P_PURCHASEPRICEVARIANCE_ACCT"/>
    <Parameter name="P_INVOICEPRICEVARIANCE_ACCT"/>
    <Parameter name="P_TRADEDISCOUNTREC_ACCT"/>

    <Parameter name="P_TRADEDISCOUNTGRANT_ACCT"/>
    <Parameter name="P_COGS_ACCT"/>
    <Parameter name="C_RECEIVABLE_ACCT"/>
    <Parameter name="C_PREPAYMENT_ACCT"/>
    <Parameter name="V_LIABILITY_ACCT"/>
    <Parameter name="V_LIABILITY_SERVICES_ACCT"/>

    <Parameter name="V_PREPAYMENT_ACCT"/>
    <Parameter name="PAYDISCOUNT_EXP_ACCT"/>
    <Parameter name="WRITEOFF_ACCT"/>

    <Parameter name="PAYDISCOUNT_REV_ACCT"/>
    <Parameter name="UNREALIZEDGAIN_ACCT"/>
    <Parameter name="UNREALIZEDLOSS_ACCT"/>

    <Parameter name="REALIZEDGAIN_ACCT"/>
    <Parameter name="REALIZEDLOSS_ACCT"/>
    <Parameter name="WITHHOLDING_ACCT"/>
    <Parameter name="E_PREPAYMENT_ACCT"/>

    <Parameter name="E_EXPENSE_ACCT"/>
    <Parameter name="PJ_ASSET_ACCT"/>

    <Parameter name="PJ_WIP_ACCT"/>
    <Parameter name="T_EXPENSE_ACCT"/>
    <Parameter name="T_LIABILITY_ACCT"/>
    <Parameter name="T_RECEIVABLES_ACCT"/>
    <Parameter name="T_DUE_ACCT"/>
    <Parameter name="T_CREDIT_ACCT"/>

    <Parameter name="B_INTRANSIT_ACCT"/>
    <Parameter name="B_ASSET_ACCT"/>
    <Parameter name="B_EXPENSE_ACCT"/>
    <Parameter name="B_INTERESTREV_ACCT"/>
    <Parameter name="B_INTERESTEXP_ACCT"/>
    <Parameter name="B_UNIDENTIFIED_ACCT"/>

    <Parameter name="B_UNALLOCATEDCASH_ACCT"/>
    <Parameter name="B_PAYMENTSELECT_ACCT"/>
    <Parameter name="B_SETTLEMENTGAIN_ACCT"/>
    <Parameter name="B_SETTLEMENTLOSS_ACCT"/>
    <Parameter name="B_REVALUATIONGAIN_ACCT"/>
    <Parameter name="B_REVALUATIONLOSS_ACCT"/>

    <Parameter name="CH_EXPENSE_ACCT"/>
    <Parameter name="CH_REVENUE_ACCT"/>
    <Parameter name="UNEARNEDREVENUE_ACCT"/>
    <Parameter name="NOTINVOICEDRECEIVABLES_ACCT"/>
    <Parameter name="NOTINVOICEDREVENUE_ACCT"/>
    <Parameter name="NOTINVOICEDRECEIPTS_ACCT"/>

    <Parameter name="CB_ASSET_ACCT"/>
    <Parameter name="CB_CASHTRANSFER_ACCT"/>
    <Parameter name="CB_DIFFERENCES_ACCT"/>
    <Parameter name="CB_EXPENSE_ACCT"/>
    <Parameter name="CB_RECEIPT_ACCT"/>

    <Parameter name="A_ACCUMDEPRECIATION_ACCT"/>
    <Parameter name="A_DEPRECIATION_ACCT"/>
    <Parameter name="A_DISPOSAL_GAIN"/>
    <Parameter name="A_DISPOSAL_LOSS"/>
    <Parameter name="C_ACCTSCHEMA_DEFAULT_ID"/>
  </SqlMethod>

  <SqlMethod name="addDefault" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      UPDATE C_ACCTSCHEMA_DEFAULT
      SET AD_CLIENT_ID =
      ?
      WHERE C_ACCTSCHEMA_ID = ?
      ]]>
    </Sql>
    <Parameter name="tablename" optional="true" type="replace" after="UPDATE " text="C_ACCTSCHEMA_DEFAULT"/>
    <Parameter name="columnname" optional="true" type="replace" after="SET " text="AD_CLIENT_ID"/>
    <Parameter name="defaultToUpdate"/>
    <Parameter name="cAcctSchemaId"/>
  </SqlMethod>

  <SqlMethod name="insertOperands" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      INSERT INTO C_ELEMENTVALUE_OPERAND (
         C_ELEMENTVALUE_OPERAND_ID, SIGN, C_ELEMENTVALUE_ID,
         ACCOUNT_ID, SEQNO, AD_CLIENT_ID,
         AD_ORG_ID, ISACTIVE, CREATED,
         CREATEDBY, UPDATED, UPDATEDBY)
      VALUES ( ?, TO_NUMBER(?), ?,
               ?, TO_NUMBER(?), ?,
               '0', 'Y', NOW(),
                ?, NOW(), ?)
      ]]>
    </Sql>
    <Parameter name="cElementValueOperandId"/>
    <Parameter name="sign"/>
    <Parameter name="cElementValueId"/>
    <Parameter name="account"/>
    <Parameter name="seqno"/>
    <Parameter name="client"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
  </SqlMethod>

  <SqlMethod name="updateElementValue" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE C_ElementValue
        SET Value=
        (SELECT Value
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,Name=
        (SELECT Name
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,Description=
        (SELECT Description
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      , AccountType=
        (SELECT AccountType
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,AccountSign=
        (SELECT AccountSign
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,IsDocControlled=
        (SELECT IsDocControlled
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,IsSummary=
        (SELECT IsSummary
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,PostActual=
        (SELECT PostActual
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,PostBudget=
        (SELECT PostBudget
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,PostEncumbrance=
        (SELECT PostEncumbrance
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,PostStatistical=
        (SELECT PostStatistical
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
      ,Updated=now()
      ,UpdatedBy=
        (SELECT UpdatedBy
        FROM I_ElementValue
        WHERE I_ElementValue_ID=?)
        WHERE C_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="iElementvalueId"/>
    <Parameter name="cElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="updateProcessing" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='Y',
        C_ElementValue_id = ?,
        Updated=now(),
        Processed='Y',
        Processing='Y'
        WHERE I_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="cElementvalueId"/>
    <Parameter name="iElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="insertElementValueError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||' Insert ElementValue: '||?
        WHERE I_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="message"/>
    <Parameter name="iElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="updateElementValueError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='E', I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||' Update ElementValue: '||?
        WHERE I_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="message"/>
    <Parameter name="iElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="updateNotImported" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_IsImported='N', Updated=now()
        WHERE I_IsImported<>'Y'
        and ad_client_ID = ?
      ]]>
    </Sql>
    <Parameter name="client"/>
  </SqlMethod>

  <SqlMethod name="setParent" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET ParentElementValue_ID = (
          SELECT C_ElementValue_ID
          FROM C_ElementValue ev
          WHERE I_ElementValue.C_Element_ID = ev.C_Element_ID
          AND I_ElementValue.ParentValue = ev.Value
          AND I_ElementValue.AD_Client_ID = ev.AD_Client_ID
        )
        WHERE ParentElementValue_ID IS NULL
        AND I_IsImported='Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="setParentError" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET I_ErrorMsg=COALESCE(TO_CHAR(I_ErrorMsg),'')||'Info=ParentNotFound, '
        WHERE ParentElementValue_ID IS NULL
        AND ParentValue IS NOT NULL
        AND I_IsImported='Y'
        AND AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="selectParents" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT i.ParentElementValue_ID, i.I_ElementValue_ID,
          e.AD_Tree_ID, i.C_ElementValue_ID, i.Value||'-'||i.Name AS Info, SeqNo
        FROM I_ElementValue i
        INNER JOIN C_Element e ON (i.C_Element_ID=e.C_Element_ID)
        WHERE i.C_ElementValue_ID IS NOT NULL
        AND e.AD_Tree_ID IS NOT NULL
        AND i.ParentElementValue_ID IS NOT NULL
        AND i.I_IsImported='Y'
        AND i.AD_Client_ID=?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateTree" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE AD_TreeNode
        SET Parent_id = ?,
          SeqNo= to_number(?)
        WHERE AD_Tree_ID=?
        AND Node_ID=?
      ]]>
    </Sql>
    <Parameter name="parentId"/>
    <Parameter name="seqNo"/>
    <Parameter name="adTreeId"/>
    <Parameter name="nodeId"/>
  </SqlMethod>

  <SqlMethod name="updateProcessed" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET Processing='-'
        WHERE I_IsImported='Y'
        AND Processed='Y'
        AND Processing='Y'
        AND C_ElementValue_ID IS NOT NULL
        AND AD_Client_ID=?
        AND 1=1
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="clause" optional="true" type="none" after="AND 1=1" text=" AND AD_Column_ID IS NULL" />
  </SqlMethod>

  <SqlMethod name="updateDescription" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE C_ValidCombination
        SET Updated=now()
        WHERE AD_Client_ID=?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="selectAcctSchema" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT C_AcctSchema.C_AcctSchema_ID, C_AcctSchema.AD_Client_ID, C_AcctSchema.AD_Org_id
        FROM C_AcctSchema_Element, C_AcctSchema
        WHERE C_AcctSchema_Element.C_ACCTSCHEMA_ID = C_AcctSchema.C_ACCTSCHEMA_ID
        AND C_AcctSchema_Element.C_Element_ID = ?
        AND C_AcctSchema_Element.AD_Client_ID = ?
      ]]>
    </Sql>
    <Parameter name="cElementId"/>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="updateDefaultAcct" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE C_AcctSchema_Element
        SET C_ElementValue_ID = (
          SELECT C_ElementValue_ID
          FROM I_ElementValue i
          WHERE C_AcctSchema_Element.C_Element_ID=i.C_Element_ID
          AND i.C_ElementValue_ID IS NOT NULL
          AND UPPER(i.Default_Account)='DEFAULT_ACCT'
        )
        WHERE EXISTS (
          SELECT *
          FROM I_ElementValue i
          WHERE C_AcctSchema_Element.C_Element_ID=i.C_Element_ID
          AND i.C_ElementValue_ID IS NOT NULL
          AND UPPER(i.Default_Account)='DEFAULT_ACCT'
          AND i.I_IsImported='Y'
        )
        AND AD_Client_ID=?
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>

  <SqlMethod name="selectAcctSchemaAC" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        select c_element_id
        from c_acctschema_element
        where c_acctschema_id = ?
        and upper(elementtype) like 'AC'
      ]]>
    </Sql>
    <Parameter name="cAcctschemaId"/>
  </SqlMethod>

  <SqlMethod name="selectElementColumnTable" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT i.C_ElementValue_ID, t.TableName, c.ColumnName, i.I_ElementValue_ID
        FROM I_ElementValue i
        INNER JOIN AD_Column c ON (i.AD_Column_ID=c.AD_Column_ID)
        INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID)
        WHERE i.I_IsImported='Y'
        AND i.Processed='Y'
        AND Processing='Y'
        AND i.C_ElementValue_ID IS NOT NULL
        AND C_Element_ID=?
      ]]>
    </Sql>
    <Parameter name="cElementId"/>
  </SqlMethod>

  <SqlMethod name="updateProcessingN" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE I_ElementValue
        SET Processing='N'
        WHERE I_ElementValue_ID=?
      ]]>
    </Sql>
    <Parameter name="iElementvalueId"/>
  </SqlMethod>

  <SqlMethod name="selectValidCombination" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT x.AD_CLIENT_ID as C_ValidCombination_ID, Account_ID
        FROM C_ACCTSCHEMA_DEFAULT x
        INNER JOIN C_VALIDCOMBINATION vc ON (x.AD_CLIENT_ID=vc.C_ValidCombination_ID)
        WHERE x.C_AcctSchema_ID=?
      ]]>
    </Sql>
    <Parameter name="columnname" optional="true" type="replace" after="SELECT x." text="AD_CLIENT_ID"/>
    <Parameter name="tablename" optional="true" type="replace" after="FROM " text="C_ACCTSCHEMA_DEFAULT"/>
    <Parameter name="columnname" optional="true" type="replace" after="ON (x." text="AD_CLIENT_ID"/>
    <Parameter name="cAcctSchemaId"/>
  </SqlMethod>

  <SqlMethod name="selectValidCombinationAll" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_CLIENT_ID,AD_ORG_ID, AD_ORGTRX_ID, ISACTIVE, CREATED, CREATEDBY,
				UPDATED,UPDATEDBY, ALIAS, COMBINATION, DESCRIPTION, ISFULLYQUALIFIED,
        C_ACCTSCHEMA_ID, ACCOUNT_ID, M_PRODUCT_ID, C_BPARTNER_ID,
        AD_ORGTRX_ID, C_LOCFROM_ID, C_LOCTO_ID, C_SALESREGION_ID,
        C_PROJECT_ID, C_CAMPAIGN_ID, C_ACTIVITY_ID, USER1_ID,USER2_ID
        FROM C_ValidCombination
        WHERE C_ValidCombination_ID=?
      ]]>
    </Sql>
    <Parameter name="cValidcombinationId"/>
  </SqlMethod>


  <SqlMethod name="insertValidCombination" type="callableStatement" return="object" object="ImportAccountData" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
        CALL C_ValidCombination_Insert(?, ?, ?, ?, ?, ?, 'N', ?, ?, ?, ?, NULL, NULL, NULL, NULL, ?, ?, NULL, NULL, NULL)
    </Sql>
    <Parameter name="cValidcombinationId" type="out"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="cAcctschemaId"/>
    <Parameter name="accountId"/>
    <Parameter name="cInValidcombinationId"/>
    <Parameter name="alias"/>
    <Parameter name="createdby"/>
    <Parameter name="mProductId"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cCampaignId"/>
  </SqlMethod>

  <SqlMethod name="getCValidCombination" connection="true" type="callableStatement" return="object" object="RespuestaCS">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        CALL C_ValidCombination_Get(?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?)
      ]]>
    </Sql>
    <Parameter name="CValidCombinationId" type="out"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="cAcctschemaId"/>
    <Parameter name="accountId"/>
    <Parameter name="cValidcombinationId"/>
    <Parameter name="isfullyqualified"/>
    <Parameter name="alias"/>
    <Parameter name="createdby"/>
    <Parameter name="mProductId"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="adOrgtrxId"/>
    <Parameter name="cLocfromId"/>
    <Parameter name="cLoctoId"/>
    <Parameter name="cSalesregionId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cCampaignId"/>
    <Parameter name="cActivityId"/>
    <Parameter name="user1Id"/>
    <Parameter name="user2Id"/>
  </SqlMethod>

  <SqlMethod name="updateAccountIdByVC" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        update C_ValidCombination
        SET Account_ID = ?
        WHERE C_ValidCombination_ID = ?
      ]]>
    </Sql>
    <Parameter name="accountId"/>
    <Parameter name="cValidcombinationId"/>
  </SqlMethod>

  <SqlMethod name="updateAbstract" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE  C_ACCTSCHEMA_DEFAULT
        SET  AD_CLIENT_id = ?
        WHERE C_AcctSchema_ID=?
      ]]>
    </Sql>
    <Parameter name="tablename" optional="true" type="replace" after="UPDATE  " text="C_ACCTSCHEMA_DEFAULT"/>
    <Parameter name="columnname" optional="true" type="replace" after="SET  " text="AD_CLIENT_ID"/>
    <Parameter name="cValidcombinationId"/>
    <Parameter name="cAcctschemaId"/>
  </SqlMethod>

  <SqlMethod name="updateAccountId" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
			  UPDATE C_ValidCombination
				SET Account_id = ?
				WHERE Account_ID=?
      ]]>
    </Sql>
    <Parameter name="cElementvalueId"/>
    <Parameter name="accountId"/>
  </SqlMethod>

  <SqlMethod name="updateFact" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
			  UPDATE Fact_Acct
				SET Account_id = ?
				WHERE Account_ID=?
      ]]>
    </Sql>
    <Parameter name="cElementvalueId"/>
    <Parameter name="accountId"/>
  </SqlMethod>

</SqlClass>
